// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

CSnap7 cSnap7 = CSnap7(ffi.DynamicLibrary.open("snap7.dll"));

class CSnap7 {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  CSnap7(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  CSnap7.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void __va_start(
    ffi.Pointer<va_list> arg0,
  ) {
    return ___va_start(
      arg0,
    );
  }

  late final ___va_startPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<va_list>)>>(
          '__va_start');
  late final ___va_start =
      ___va_startPtr.asFunction<void Function(ffi.Pointer<va_list>)>();

  void __security_init_cookie() {
    return ___security_init_cookie();
  }

  late final ___security_init_cookiePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          '__security_init_cookie');
  late final ___security_init_cookie =
      ___security_init_cookiePtr.asFunction<void Function()>();

  void __security_check_cookie(
    int _StackCookie,
  ) {
    return ___security_check_cookie(
      _StackCookie,
    );
  }

  late final ___security_check_cookiePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          '__security_check_cookie');
  late final ___security_check_cookie =
      ___security_check_cookiePtr.asFunction<void Function(int)>();

  void __report_gsfailure(
    int _StackCookie,
  ) {
    return ___report_gsfailure(
      _StackCookie,
    );
  }

  late final ___report_gsfailurePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          '__report_gsfailure');
  late final ___report_gsfailure =
      ___report_gsfailurePtr.asFunction<void Function(int)>();

  late final ffi.Pointer<ffi.UintPtr> ___security_cookie =
      _lookup<ffi.UintPtr>('__security_cookie');

  int get __security_cookie => ___security_cookie.value;

  set __security_cookie(int value) => ___security_cookie.value = value;

  void _invalid_parameter_noinfo() {
    return __invalid_parameter_noinfo();
  }

  late final __invalid_parameter_noinfoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          '_invalid_parameter_noinfo');
  late final __invalid_parameter_noinfo =
      __invalid_parameter_noinfoPtr.asFunction<void Function()>();

  void _invalid_parameter_noinfo_noreturn() {
    return __invalid_parameter_noinfo_noreturn();
  }

  late final __invalid_parameter_noinfo_noreturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          '_invalid_parameter_noinfo_noreturn');
  late final __invalid_parameter_noinfo_noreturn =
      __invalid_parameter_noinfo_noreturnPtr.asFunction<void Function()>();

  void _invoke_watson(
    ffi.Pointer<ffi.WChar> _Expression,
    ffi.Pointer<ffi.WChar> _FunctionName,
    ffi.Pointer<ffi.WChar> _FileName,
    int _LineNo,
    int _Reserved,
  ) {
    return __invoke_watson(
      _Expression,
      _FunctionName,
      _FileName,
      _LineNo,
      _Reserved,
    );
  }

  late final __invoke_watsonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>,
              ffi.UnsignedInt,
              ffi.UintPtr)>>('_invoke_watson');
  late final __invoke_watson = __invoke_watsonPtr.asFunction<
      void Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>, int, int)>();

  ffi.Pointer<ffi.WChar> _wasctime(
    ffi.Pointer<tm> _Tm,
  ) {
    return __wasctime(
      _Tm,
    );
  }

  late final __wasctimePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.WChar> Function(ffi.Pointer<tm>)>>(
      '_wasctime');
  late final __wasctime = __wasctimePtr
      .asFunction<ffi.Pointer<ffi.WChar> Function(ffi.Pointer<tm>)>();

  int _wasctime_s(
    ffi.Pointer<ffi.WChar> _Buffer,
    int _SizeInWords,
    ffi.Pointer<tm> _Tm,
  ) {
    return __wasctime_s(
      _Buffer,
      _SizeInWords,
      _Tm,
    );
  }

  late final __wasctime_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.WChar>, ffi.Size,
              ffi.Pointer<tm>)>>('_wasctime_s');
  late final __wasctime_s = __wasctime_sPtr
      .asFunction<int Function(ffi.Pointer<ffi.WChar>, int, ffi.Pointer<tm>)>();

  int wcsftime(
    ffi.Pointer<ffi.WChar> _Buffer,
    int _SizeInWords,
    ffi.Pointer<ffi.WChar> _Format,
    ffi.Pointer<tm> _Tm,
  ) {
    return _wcsftime(
      _Buffer,
      _SizeInWords,
      _Format,
      _Tm,
    );
  }

  late final _wcsftimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.WChar>, ffi.Size,
              ffi.Pointer<ffi.WChar>, ffi.Pointer<tm>)>>('wcsftime');
  late final _wcsftime = _wcsftimePtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, int, ffi.Pointer<ffi.WChar>,
          ffi.Pointer<tm>)>();

  int _wcsftime_l(
    ffi.Pointer<ffi.WChar> _Buffer,
    int _SizeInWords,
    ffi.Pointer<ffi.WChar> _Format,
    ffi.Pointer<tm> _Tm,
    _locale_t _Locale,
  ) {
    return __wcsftime_l(
      _Buffer,
      _SizeInWords,
      _Format,
      _Tm,
      _Locale,
    );
  }

  late final __wcsftime_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<ffi.WChar>,
              ffi.Size,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<tm>,
              _locale_t)>>('_wcsftime_l');
  late final __wcsftime_l = __wcsftime_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, int, ffi.Pointer<ffi.WChar>,
          ffi.Pointer<tm>, _locale_t)>();

  ffi.Pointer<ffi.WChar> _wctime32(
    ffi.Pointer<__time32_t> _Time,
  ) {
    return __wctime32(
      _Time,
    );
  }

  late final __wctime32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.Pointer<__time32_t>)>>('_wctime32');
  late final __wctime32 = __wctime32Ptr
      .asFunction<ffi.Pointer<ffi.WChar> Function(ffi.Pointer<__time32_t>)>();

  int _wctime32_s(
    ffi.Pointer<ffi.WChar> _Buffer,
    int _SizeInWords,
    ffi.Pointer<__time32_t> _Time,
  ) {
    return __wctime32_s(
      _Buffer,
      _SizeInWords,
      _Time,
    );
  }

  late final __wctime32_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.WChar>, ffi.Size,
              ffi.Pointer<__time32_t>)>>('_wctime32_s');
  late final __wctime32_s = __wctime32_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, int, ffi.Pointer<__time32_t>)>();

  ffi.Pointer<ffi.WChar> _wctime64(
    ffi.Pointer<__time64_t> _Time,
  ) {
    return __wctime64(
      _Time,
    );
  }

  late final __wctime64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.Pointer<__time64_t>)>>('_wctime64');
  late final __wctime64 = __wctime64Ptr
      .asFunction<ffi.Pointer<ffi.WChar> Function(ffi.Pointer<__time64_t>)>();

  int _wctime64_s(
    ffi.Pointer<ffi.WChar> _Buffer,
    int _SizeInWords,
    ffi.Pointer<__time64_t> _Time,
  ) {
    return __wctime64_s(
      _Buffer,
      _SizeInWords,
      _Time,
    );
  }

  late final __wctime64_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.WChar>, ffi.Size,
              ffi.Pointer<__time64_t>)>>('_wctime64_s');
  late final __wctime64_s = __wctime64_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, int, ffi.Pointer<__time64_t>)>();

  int _wstrdate_s(
    ffi.Pointer<ffi.WChar> _Buffer,
    int _SizeInWords,
  ) {
    return __wstrdate_s(
      _Buffer,
      _SizeInWords,
    );
  }

  late final __wstrdate_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.WChar>, ffi.Size)>>('_wstrdate_s');
  late final __wstrdate_s =
      __wstrdate_sPtr.asFunction<int Function(ffi.Pointer<ffi.WChar>, int)>();

  ffi.Pointer<ffi.WChar> _wstrdate(
    ffi.Pointer<ffi.WChar> _Buffer,
  ) {
    return __wstrdate(
      _Buffer,
    );
  }

  late final __wstrdatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.Pointer<ffi.WChar>)>>('_wstrdate');
  late final __wstrdate = __wstrdatePtr
      .asFunction<ffi.Pointer<ffi.WChar> Function(ffi.Pointer<ffi.WChar>)>();

  int _wstrtime_s(
    ffi.Pointer<ffi.WChar> _Buffer,
    int _SizeInWords,
  ) {
    return __wstrtime_s(
      _Buffer,
      _SizeInWords,
    );
  }

  late final __wstrtime_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.WChar>, ffi.Size)>>('_wstrtime_s');
  late final __wstrtime_s =
      __wstrtime_sPtr.asFunction<int Function(ffi.Pointer<ffi.WChar>, int)>();

  ffi.Pointer<ffi.WChar> _wstrtime(
    ffi.Pointer<ffi.WChar> _Buffer,
  ) {
    return __wstrtime(
      _Buffer,
    );
  }

  late final __wstrtimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.Pointer<ffi.WChar>)>>('_wstrtime');
  late final __wstrtime = __wstrtimePtr
      .asFunction<ffi.Pointer<ffi.WChar> Function(ffi.Pointer<ffi.WChar>)>();

  ffi.Pointer<ffi.Int> __daylight() {
    return ___daylight();
  }

  late final ___daylightPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int> Function()>>(
          '__daylight');
  late final ___daylight =
      ___daylightPtr.asFunction<ffi.Pointer<ffi.Int> Function()>();

  ffi.Pointer<ffi.Long> __dstbias() {
    return ___dstbias();
  }

  late final ___dstbiasPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Long> Function()>>(
          '__dstbias');
  late final ___dstbias =
      ___dstbiasPtr.asFunction<ffi.Pointer<ffi.Long> Function()>();

  ffi.Pointer<ffi.Long> __timezone() {
    return ___timezone();
  }

  late final ___timezonePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Long> Function()>>(
          '__timezone');
  late final ___timezone =
      ___timezonePtr.asFunction<ffi.Pointer<ffi.Long> Function()>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> __tzname() {
    return ___tzname();
  }

  late final ___tznamePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Pointer<ffi.Char>> Function()>>(
      '__tzname');
  late final ___tzname =
      ___tznamePtr.asFunction<ffi.Pointer<ffi.Pointer<ffi.Char>> Function()>();

  int _get_daylight(
    ffi.Pointer<ffi.Int> _Daylight,
  ) {
    return __get_daylight(
      _Daylight,
    );
  }

  late final __get_daylightPtr =
      _lookup<ffi.NativeFunction<errno_t Function(ffi.Pointer<ffi.Int>)>>(
          '_get_daylight');
  late final __get_daylight =
      __get_daylightPtr.asFunction<int Function(ffi.Pointer<ffi.Int>)>();

  int _get_dstbias(
    ffi.Pointer<ffi.Long> _DaylightSavingsBias,
  ) {
    return __get_dstbias(
      _DaylightSavingsBias,
    );
  }

  late final __get_dstbiasPtr =
      _lookup<ffi.NativeFunction<errno_t Function(ffi.Pointer<ffi.Long>)>>(
          '_get_dstbias');
  late final __get_dstbias =
      __get_dstbiasPtr.asFunction<int Function(ffi.Pointer<ffi.Long>)>();

  int _get_timezone(
    ffi.Pointer<ffi.Long> _TimeZone,
  ) {
    return __get_timezone(
      _TimeZone,
    );
  }

  late final __get_timezonePtr =
      _lookup<ffi.NativeFunction<errno_t Function(ffi.Pointer<ffi.Long>)>>(
          '_get_timezone');
  late final __get_timezone =
      __get_timezonePtr.asFunction<int Function(ffi.Pointer<ffi.Long>)>();

  int _get_tzname(
    ffi.Pointer<ffi.Size> _ReturnValue,
    ffi.Pointer<ffi.Char> _Buffer,
    int _SizeInBytes,
    int _Index,
  ) {
    return __get_tzname(
      _ReturnValue,
      _Buffer,
      _SizeInBytes,
      _Index,
    );
  }

  late final __get_tznamePtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.Char>,
              ffi.Size, ffi.Int)>>('_get_tzname');
  late final __get_tzname = __get_tznamePtr.asFunction<
      int Function(ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.Char>, int, int)>();

  ffi.Pointer<ffi.Char> asctime(
    ffi.Pointer<tm> _Tm,
  ) {
    return _asctime(
      _Tm,
    );
  }

  late final _asctimePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<tm>)>>(
      'asctime');
  late final _asctime =
      _asctimePtr.asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<tm>)>();

  int asctime_s(
    ffi.Pointer<ffi.Char> _Buffer,
    int _SizeInBytes,
    ffi.Pointer<tm> _Tm,
  ) {
    return _asctime_s(
      _Buffer,
      _SizeInBytes,
      _Tm,
    );
  }

  late final _asctime_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<ffi.Char>, ffi.Size, ffi.Pointer<tm>)>>('asctime_s');
  late final _asctime_s = _asctime_sPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<tm>)>();

  int clock() {
    return _clock();
  }

  late final _clockPtr =
      _lookup<ffi.NativeFunction<clock_t Function()>>('clock');
  late final _clock = _clockPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> _ctime32(
    ffi.Pointer<__time32_t> _Time,
  ) {
    return __ctime32(
      _Time,
    );
  }

  late final __ctime32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<__time32_t>)>>('_ctime32');
  late final __ctime32 = __ctime32Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<__time32_t>)>();

  int _ctime32_s(
    ffi.Pointer<ffi.Char> _Buffer,
    int _SizeInBytes,
    ffi.Pointer<__time32_t> _Time,
  ) {
    return __ctime32_s(
      _Buffer,
      _SizeInBytes,
      _Time,
    );
  }

  late final __ctime32_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<__time32_t>)>>('_ctime32_s');
  late final __ctime32_s = __ctime32_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<__time32_t>)>();

  ffi.Pointer<ffi.Char> _ctime64(
    ffi.Pointer<__time64_t> _Time,
  ) {
    return __ctime64(
      _Time,
    );
  }

  late final __ctime64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<__time64_t>)>>('_ctime64');
  late final __ctime64 = __ctime64Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<__time64_t>)>();

  int _ctime64_s(
    ffi.Pointer<ffi.Char> _Buffer,
    int _SizeInBytes,
    ffi.Pointer<__time64_t> _Time,
  ) {
    return __ctime64_s(
      _Buffer,
      _SizeInBytes,
      _Time,
    );
  }

  late final __ctime64_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<__time64_t>)>>('_ctime64_s');
  late final __ctime64_s = __ctime64_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<__time64_t>)>();

  double _difftime32(
    int _Time1,
    int _Time2,
  ) {
    return __difftime32(
      _Time1,
      _Time2,
    );
  }

  late final __difftime32Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(__time32_t, __time32_t)>>(
          '_difftime32');
  late final __difftime32 =
      __difftime32Ptr.asFunction<double Function(int, int)>();

  double _difftime64(
    int _Time1,
    int _Time2,
  ) {
    return __difftime64(
      _Time1,
      _Time2,
    );
  }

  late final __difftime64Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(__time64_t, __time64_t)>>(
          '_difftime64');
  late final __difftime64 =
      __difftime64Ptr.asFunction<double Function(int, int)>();

  ffi.Pointer<tm> _gmtime32(
    ffi.Pointer<__time32_t> _Time,
  ) {
    return __gmtime32(
      _Time,
    );
  }

  late final __gmtime32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<tm> Function(ffi.Pointer<__time32_t>)>>('_gmtime32');
  late final __gmtime32 = __gmtime32Ptr
      .asFunction<ffi.Pointer<tm> Function(ffi.Pointer<__time32_t>)>();

  int _gmtime32_s(
    ffi.Pointer<tm> _Tm,
    ffi.Pointer<__time32_t> _Time,
  ) {
    return __gmtime32_s(
      _Tm,
      _Time,
    );
  }

  late final __gmtime32_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<tm>, ffi.Pointer<__time32_t>)>>('_gmtime32_s');
  late final __gmtime32_s = __gmtime32_sPtr
      .asFunction<int Function(ffi.Pointer<tm>, ffi.Pointer<__time32_t>)>();

  ffi.Pointer<tm> _gmtime64(
    ffi.Pointer<__time64_t> _Time,
  ) {
    return __gmtime64(
      _Time,
    );
  }

  late final __gmtime64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<tm> Function(ffi.Pointer<__time64_t>)>>('_gmtime64');
  late final __gmtime64 = __gmtime64Ptr
      .asFunction<ffi.Pointer<tm> Function(ffi.Pointer<__time64_t>)>();

  int _gmtime64_s(
    ffi.Pointer<tm> _Tm,
    ffi.Pointer<__time64_t> _Time,
  ) {
    return __gmtime64_s(
      _Tm,
      _Time,
    );
  }

  late final __gmtime64_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<tm>, ffi.Pointer<__time64_t>)>>('_gmtime64_s');
  late final __gmtime64_s = __gmtime64_sPtr
      .asFunction<int Function(ffi.Pointer<tm>, ffi.Pointer<__time64_t>)>();

  ffi.Pointer<tm> _localtime32(
    ffi.Pointer<__time32_t> _Time,
  ) {
    return __localtime32(
      _Time,
    );
  }

  late final __localtime32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<tm> Function(ffi.Pointer<__time32_t>)>>('_localtime32');
  late final __localtime32 = __localtime32Ptr
      .asFunction<ffi.Pointer<tm> Function(ffi.Pointer<__time32_t>)>();

  int _localtime32_s(
    ffi.Pointer<tm> _Tm,
    ffi.Pointer<__time32_t> _Time,
  ) {
    return __localtime32_s(
      _Tm,
      _Time,
    );
  }

  late final __localtime32_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<tm>, ffi.Pointer<__time32_t>)>>('_localtime32_s');
  late final __localtime32_s = __localtime32_sPtr
      .asFunction<int Function(ffi.Pointer<tm>, ffi.Pointer<__time32_t>)>();

  ffi.Pointer<tm> _localtime64(
    ffi.Pointer<__time64_t> _Time,
  ) {
    return __localtime64(
      _Time,
    );
  }

  late final __localtime64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<tm> Function(ffi.Pointer<__time64_t>)>>('_localtime64');
  late final __localtime64 = __localtime64Ptr
      .asFunction<ffi.Pointer<tm> Function(ffi.Pointer<__time64_t>)>();

  int _localtime64_s(
    ffi.Pointer<tm> _Tm,
    ffi.Pointer<__time64_t> _Time,
  ) {
    return __localtime64_s(
      _Tm,
      _Time,
    );
  }

  late final __localtime64_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<tm>, ffi.Pointer<__time64_t>)>>('_localtime64_s');
  late final __localtime64_s = __localtime64_sPtr
      .asFunction<int Function(ffi.Pointer<tm>, ffi.Pointer<__time64_t>)>();

  int _mkgmtime32(
    ffi.Pointer<tm> _Tm,
  ) {
    return __mkgmtime32(
      _Tm,
    );
  }

  late final __mkgmtime32Ptr =
      _lookup<ffi.NativeFunction<__time32_t Function(ffi.Pointer<tm>)>>(
          '_mkgmtime32');
  late final __mkgmtime32 =
      __mkgmtime32Ptr.asFunction<int Function(ffi.Pointer<tm>)>();

  int _mkgmtime64(
    ffi.Pointer<tm> _Tm,
  ) {
    return __mkgmtime64(
      _Tm,
    );
  }

  late final __mkgmtime64Ptr =
      _lookup<ffi.NativeFunction<__time64_t Function(ffi.Pointer<tm>)>>(
          '_mkgmtime64');
  late final __mkgmtime64 =
      __mkgmtime64Ptr.asFunction<int Function(ffi.Pointer<tm>)>();

  int _mktime32(
    ffi.Pointer<tm> _Tm,
  ) {
    return __mktime32(
      _Tm,
    );
  }

  late final __mktime32Ptr =
      _lookup<ffi.NativeFunction<__time32_t Function(ffi.Pointer<tm>)>>(
          '_mktime32');
  late final __mktime32 =
      __mktime32Ptr.asFunction<int Function(ffi.Pointer<tm>)>();

  int _mktime64(
    ffi.Pointer<tm> _Tm,
  ) {
    return __mktime64(
      _Tm,
    );
  }

  late final __mktime64Ptr =
      _lookup<ffi.NativeFunction<__time64_t Function(ffi.Pointer<tm>)>>(
          '_mktime64');
  late final __mktime64 =
      __mktime64Ptr.asFunction<int Function(ffi.Pointer<tm>)>();

  int strftime(
    ffi.Pointer<ffi.Char> _Buffer,
    int _SizeInBytes,
    ffi.Pointer<ffi.Char> _Format,
    ffi.Pointer<tm> _Tm,
  ) {
    return _strftime(
      _Buffer,
      _SizeInBytes,
      _Format,
      _Tm,
    );
  }

  late final _strftimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Char>, ffi.Pointer<tm>)>>('strftime');
  late final _strftime = _strftimePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<tm>)>();

  int _strftime_l(
    ffi.Pointer<ffi.Char> _Buffer,
    int _MaxSize,
    ffi.Pointer<ffi.Char> _Format,
    ffi.Pointer<tm> _Tm,
    _locale_t _Locale,
  ) {
    return __strftime_l(
      _Buffer,
      _MaxSize,
      _Format,
      _Tm,
      _Locale,
    );
  }

  late final __strftime_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<tm>,
              _locale_t)>>('_strftime_l');
  late final __strftime_l = __strftime_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<tm>, _locale_t)>();

  int _strdate_s(
    ffi.Pointer<ffi.Char> _Buffer,
    int _SizeInBytes,
  ) {
    return __strdate_s(
      _Buffer,
      _SizeInBytes,
    );
  }

  late final __strdate_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('_strdate_s');
  late final __strdate_s =
      __strdate_sPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> _strdate(
    ffi.Pointer<ffi.Char> _Buffer,
  ) {
    return __strdate(
      _Buffer,
    );
  }

  late final __strdatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('_strdate');
  late final __strdate = __strdatePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int _strtime_s(
    ffi.Pointer<ffi.Char> _Buffer,
    int _SizeInBytes,
  ) {
    return __strtime_s(
      _Buffer,
      _SizeInBytes,
    );
  }

  late final __strtime_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('_strtime_s');
  late final __strtime_s =
      __strtime_sPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> _strtime(
    ffi.Pointer<ffi.Char> _Buffer,
  ) {
    return __strtime(
      _Buffer,
    );
  }

  late final __strtimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('_strtime');
  late final __strtime = __strtimePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int _time32(
    ffi.Pointer<__time32_t> _Time,
  ) {
    return __time32(
      _Time,
    );
  }

  late final __time32Ptr =
      _lookup<ffi.NativeFunction<__time32_t Function(ffi.Pointer<__time32_t>)>>(
          '_time32');
  late final __time32 =
      __time32Ptr.asFunction<int Function(ffi.Pointer<__time32_t>)>();

  int _time64(
    ffi.Pointer<__time64_t> _Time,
  ) {
    return __time64(
      _Time,
    );
  }

  late final __time64Ptr =
      _lookup<ffi.NativeFunction<__time64_t Function(ffi.Pointer<__time64_t>)>>(
          '_time64');
  late final __time64 =
      __time64Ptr.asFunction<int Function(ffi.Pointer<__time64_t>)>();

  int _timespec32_get(
    ffi.Pointer<_timespec32> _Ts,
    int _Base,
  ) {
    return __timespec32_get(
      _Ts,
      _Base,
    );
  }

  late final __timespec32_getPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<_timespec32>, ffi.Int)>>(
      '_timespec32_get');
  late final __timespec32_get = __timespec32_getPtr
      .asFunction<int Function(ffi.Pointer<_timespec32>, int)>();

  int _timespec64_get(
    ffi.Pointer<_timespec64> _Ts,
    int _Base,
  ) {
    return __timespec64_get(
      _Ts,
      _Base,
    );
  }

  late final __timespec64_getPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<_timespec64>, ffi.Int)>>(
      '_timespec64_get');
  late final __timespec64_get = __timespec64_getPtr
      .asFunction<int Function(ffi.Pointer<_timespec64>, int)>();

  void _tzset() {
    return __tzset();
  }

  late final __tzsetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('_tzset');
  late final __tzset = __tzsetPtr.asFunction<void Function()>();

  int _getsystime(
    ffi.Pointer<tm> _Tm,
  ) {
    return __getsystime(
      _Tm,
    );
  }

  late final __getsystimePtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<tm>)>>(
          '_getsystime');
  late final __getsystime =
      __getsystimePtr.asFunction<int Function(ffi.Pointer<tm>)>();

  int _setsystime(
    ffi.Pointer<tm> _Tm,
    int _Milliseconds,
  ) {
    return __setsystime(
      _Tm,
      _Milliseconds,
    );
  }

  late final __setsystimePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<tm>, ffi.UnsignedInt)>>('_setsystime');
  late final __setsystime =
      __setsystimePtr.asFunction<int Function(ffi.Pointer<tm>, int)>();

  void tzset() {
    return _tzset1();
  }

  late final _tzsetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('tzset');
  late final _tzset1 = _tzsetPtr.asFunction<void Function()>();

  late final ffi.Pointer<ffi.Int> _errLibInvalidParam =
      _lookup<ffi.Int>('errLibInvalidParam');

  int get errLibInvalidParam => _errLibInvalidParam.value;

  set errLibInvalidParam(int value) => _errLibInvalidParam.value = value;

  late final ffi.Pointer<ffi.Int> _errLibInvalidObject =
      _lookup<ffi.Int>('errLibInvalidObject');

  int get errLibInvalidObject => _errLibInvalidObject.value;

  set errLibInvalidObject(int value) => _errLibInvalidObject.value = value;

  late final ffi.Pointer<longword> _errIsoConnect =
      _lookup<longword>('errIsoConnect');

  int get errIsoConnect => _errIsoConnect.value;

  set errIsoConnect(int value) => _errIsoConnect.value = value;

  late final ffi.Pointer<longword> _errIsoDisconnect =
      _lookup<longword>('errIsoDisconnect');

  int get errIsoDisconnect => _errIsoDisconnect.value;

  set errIsoDisconnect(int value) => _errIsoDisconnect.value = value;

  late final ffi.Pointer<longword> _errIsoInvalidPDU =
      _lookup<longword>('errIsoInvalidPDU');

  int get errIsoInvalidPDU => _errIsoInvalidPDU.value;

  set errIsoInvalidPDU(int value) => _errIsoInvalidPDU.value = value;

  late final ffi.Pointer<longword> _errIsoInvalidDataSize =
      _lookup<longword>('errIsoInvalidDataSize');

  int get errIsoInvalidDataSize => _errIsoInvalidDataSize.value;

  set errIsoInvalidDataSize(int value) => _errIsoInvalidDataSize.value = value;

  late final ffi.Pointer<longword> _errIsoNullPointer =
      _lookup<longword>('errIsoNullPointer');

  int get errIsoNullPointer => _errIsoNullPointer.value;

  set errIsoNullPointer(int value) => _errIsoNullPointer.value = value;

  late final ffi.Pointer<longword> _errIsoShortPacket =
      _lookup<longword>('errIsoShortPacket');

  int get errIsoShortPacket => _errIsoShortPacket.value;

  set errIsoShortPacket(int value) => _errIsoShortPacket.value = value;

  late final ffi.Pointer<longword> _errIsoTooManyFragments =
      _lookup<longword>('errIsoTooManyFragments');

  int get errIsoTooManyFragments => _errIsoTooManyFragments.value;

  set errIsoTooManyFragments(int value) =>
      _errIsoTooManyFragments.value = value;

  late final ffi.Pointer<longword> _errIsoPduOverflow =
      _lookup<longword>('errIsoPduOverflow');

  int get errIsoPduOverflow => _errIsoPduOverflow.value;

  set errIsoPduOverflow(int value) => _errIsoPduOverflow.value = value;

  late final ffi.Pointer<longword> _errIsoSendPacket =
      _lookup<longword>('errIsoSendPacket');

  int get errIsoSendPacket => _errIsoSendPacket.value;

  set errIsoSendPacket(int value) => _errIsoSendPacket.value = value;

  late final ffi.Pointer<longword> _errIsoRecvPacket =
      _lookup<longword>('errIsoRecvPacket');

  int get errIsoRecvPacket => _errIsoRecvPacket.value;

  set errIsoRecvPacket(int value) => _errIsoRecvPacket.value = value;

  late final ffi.Pointer<longword> _errIsoInvalidParams =
      _lookup<longword>('errIsoInvalidParams');

  int get errIsoInvalidParams => _errIsoInvalidParams.value;

  set errIsoInvalidParams(int value) => _errIsoInvalidParams.value = value;

  late final ffi.Pointer<longword> _errIsoResvd_1 =
      _lookup<longword>('errIsoResvd_1');

  int get errIsoResvd_1 => _errIsoResvd_1.value;

  set errIsoResvd_1(int value) => _errIsoResvd_1.value = value;

  late final ffi.Pointer<longword> _errIsoResvd_2 =
      _lookup<longword>('errIsoResvd_2');

  int get errIsoResvd_2 => _errIsoResvd_2.value;

  set errIsoResvd_2(int value) => _errIsoResvd_2.value = value;

  late final ffi.Pointer<longword> _errIsoResvd_3 =
      _lookup<longword>('errIsoResvd_3');

  int get errIsoResvd_3 => _errIsoResvd_3.value;

  set errIsoResvd_3(int value) => _errIsoResvd_3.value = value;

  late final ffi.Pointer<longword> _errIsoResvd_4 =
      _lookup<longword>('errIsoResvd_4');

  int get errIsoResvd_4 => _errIsoResvd_4.value;

  set errIsoResvd_4(int value) => _errIsoResvd_4.value = value;

  late final ffi.Pointer<ffi.Int> _p_u16_LocalPort =
      _lookup<ffi.Int>('p_u16_LocalPort');

  int get p_u16_LocalPort => _p_u16_LocalPort.value;

  set p_u16_LocalPort(int value) => _p_u16_LocalPort.value = value;

  late final ffi.Pointer<ffi.Int> _p_u16_RemotePort =
      _lookup<ffi.Int>('p_u16_RemotePort');

  int get p_u16_RemotePort => _p_u16_RemotePort.value;

  set p_u16_RemotePort(int value) => _p_u16_RemotePort.value = value;

  late final ffi.Pointer<ffi.Int> _p_i32_PingTimeout =
      _lookup<ffi.Int>('p_i32_PingTimeout');

  int get p_i32_PingTimeout => _p_i32_PingTimeout.value;

  set p_i32_PingTimeout(int value) => _p_i32_PingTimeout.value = value;

  late final ffi.Pointer<ffi.Int> _p_i32_SendTimeout =
      _lookup<ffi.Int>('p_i32_SendTimeout');

  int get p_i32_SendTimeout => _p_i32_SendTimeout.value;

  set p_i32_SendTimeout(int value) => _p_i32_SendTimeout.value = value;

  late final ffi.Pointer<ffi.Int> _p_i32_RecvTimeout =
      _lookup<ffi.Int>('p_i32_RecvTimeout');

  int get p_i32_RecvTimeout => _p_i32_RecvTimeout.value;

  set p_i32_RecvTimeout(int value) => _p_i32_RecvTimeout.value = value;

  late final ffi.Pointer<ffi.Int> _p_i32_WorkInterval =
      _lookup<ffi.Int>('p_i32_WorkInterval');

  int get p_i32_WorkInterval => _p_i32_WorkInterval.value;

  set p_i32_WorkInterval(int value) => _p_i32_WorkInterval.value = value;

  late final ffi.Pointer<ffi.Int> _p_u16_SrcRef =
      _lookup<ffi.Int>('p_u16_SrcRef');

  int get p_u16_SrcRef => _p_u16_SrcRef.value;

  set p_u16_SrcRef(int value) => _p_u16_SrcRef.value = value;

  late final ffi.Pointer<ffi.Int> _p_u16_DstRef =
      _lookup<ffi.Int>('p_u16_DstRef');

  int get p_u16_DstRef => _p_u16_DstRef.value;

  set p_u16_DstRef(int value) => _p_u16_DstRef.value = value;

  late final ffi.Pointer<ffi.Int> _p_u16_SrcTSap =
      _lookup<ffi.Int>('p_u16_SrcTSap');

  int get p_u16_SrcTSap => _p_u16_SrcTSap.value;

  set p_u16_SrcTSap(int value) => _p_u16_SrcTSap.value = value;

  late final ffi.Pointer<ffi.Int> _p_i32_PDURequest =
      _lookup<ffi.Int>('p_i32_PDURequest');

  int get p_i32_PDURequest => _p_i32_PDURequest.value;

  set p_i32_PDURequest(int value) => _p_i32_PDURequest.value = value;

  late final ffi.Pointer<ffi.Int> _p_i32_MaxClients =
      _lookup<ffi.Int>('p_i32_MaxClients');

  int get p_i32_MaxClients => _p_i32_MaxClients.value;

  set p_i32_MaxClients(int value) => _p_i32_MaxClients.value = value;

  late final ffi.Pointer<ffi.Int> _p_i32_BSendTimeout =
      _lookup<ffi.Int>('p_i32_BSendTimeout');

  int get p_i32_BSendTimeout => _p_i32_BSendTimeout.value;

  set p_i32_BSendTimeout(int value) => _p_i32_BSendTimeout.value = value;

  late final ffi.Pointer<ffi.Int> _p_i32_BRecvTimeout =
      _lookup<ffi.Int>('p_i32_BRecvTimeout');

  int get p_i32_BRecvTimeout => _p_i32_BRecvTimeout.value;

  set p_i32_BRecvTimeout(int value) => _p_i32_BRecvTimeout.value = value;

  late final ffi.Pointer<ffi.Int> _p_u32_RecoveryTime =
      _lookup<ffi.Int>('p_u32_RecoveryTime');

  int get p_u32_RecoveryTime => _p_u32_RecoveryTime.value;

  set p_u32_RecoveryTime(int value) => _p_u32_RecoveryTime.value = value;

  late final ffi.Pointer<ffi.Int> _p_u32_KeepAliveTime =
      _lookup<ffi.Int>('p_u32_KeepAliveTime');

  int get p_u32_KeepAliveTime => _p_u32_KeepAliveTime.value;

  set p_u32_KeepAliveTime(int value) => _p_u32_KeepAliveTime.value = value;

  late final ffi.Pointer<ffi.Int> _JobComplete =
      _lookup<ffi.Int>('JobComplete');

  int get JobComplete => _JobComplete.value;

  set JobComplete(int value) => _JobComplete.value = value;

  late final ffi.Pointer<ffi.Int> _JobPending = _lookup<ffi.Int>('JobPending');

  int get JobPending => _JobPending.value;

  set JobPending(int value) => _JobPending.value = value;

  late final ffi.Pointer<longword> _errNegotiatingPDU =
      _lookup<longword>('errNegotiatingPDU');

  int get errNegotiatingPDU => _errNegotiatingPDU.value;

  set errNegotiatingPDU(int value) => _errNegotiatingPDU.value = value;

  late final ffi.Pointer<longword> _errCliInvalidParams =
      _lookup<longword>('errCliInvalidParams');

  int get errCliInvalidParams => _errCliInvalidParams.value;

  set errCliInvalidParams(int value) => _errCliInvalidParams.value = value;

  late final ffi.Pointer<longword> _errCliJobPending =
      _lookup<longword>('errCliJobPending');

  int get errCliJobPending => _errCliJobPending.value;

  set errCliJobPending(int value) => _errCliJobPending.value = value;

  late final ffi.Pointer<longword> _errCliTooManyItems =
      _lookup<longword>('errCliTooManyItems');

  int get errCliTooManyItems => _errCliTooManyItems.value;

  set errCliTooManyItems(int value) => _errCliTooManyItems.value = value;

  late final ffi.Pointer<longword> _errCliInvalidWordLen =
      _lookup<longword>('errCliInvalidWordLen');

  int get errCliInvalidWordLen => _errCliInvalidWordLen.value;

  set errCliInvalidWordLen(int value) => _errCliInvalidWordLen.value = value;

  late final ffi.Pointer<longword> _errCliPartialDataWritten =
      _lookup<longword>('errCliPartialDataWritten');

  int get errCliPartialDataWritten => _errCliPartialDataWritten.value;

  set errCliPartialDataWritten(int value) =>
      _errCliPartialDataWritten.value = value;

  late final ffi.Pointer<longword> _errCliSizeOverPDU =
      _lookup<longword>('errCliSizeOverPDU');

  int get errCliSizeOverPDU => _errCliSizeOverPDU.value;

  set errCliSizeOverPDU(int value) => _errCliSizeOverPDU.value = value;

  late final ffi.Pointer<longword> _errCliInvalidPlcAnswer =
      _lookup<longword>('errCliInvalidPlcAnswer');

  int get errCliInvalidPlcAnswer => _errCliInvalidPlcAnswer.value;

  set errCliInvalidPlcAnswer(int value) =>
      _errCliInvalidPlcAnswer.value = value;

  late final ffi.Pointer<longword> _errCliAddressOutOfRange =
      _lookup<longword>('errCliAddressOutOfRange');

  int get errCliAddressOutOfRange => _errCliAddressOutOfRange.value;

  set errCliAddressOutOfRange(int value) =>
      _errCliAddressOutOfRange.value = value;

  late final ffi.Pointer<longword> _errCliInvalidTransportSize =
      _lookup<longword>('errCliInvalidTransportSize');

  int get errCliInvalidTransportSize => _errCliInvalidTransportSize.value;

  set errCliInvalidTransportSize(int value) =>
      _errCliInvalidTransportSize.value = value;

  late final ffi.Pointer<longword> _errCliWriteDataSizeMismatch =
      _lookup<longword>('errCliWriteDataSizeMismatch');

  int get errCliWriteDataSizeMismatch => _errCliWriteDataSizeMismatch.value;

  set errCliWriteDataSizeMismatch(int value) =>
      _errCliWriteDataSizeMismatch.value = value;

  late final ffi.Pointer<longword> _errCliItemNotAvailable =
      _lookup<longword>('errCliItemNotAvailable');

  int get errCliItemNotAvailable => _errCliItemNotAvailable.value;

  set errCliItemNotAvailable(int value) =>
      _errCliItemNotAvailable.value = value;

  late final ffi.Pointer<longword> _errCliInvalidValue =
      _lookup<longword>('errCliInvalidValue');

  int get errCliInvalidValue => _errCliInvalidValue.value;

  set errCliInvalidValue(int value) => _errCliInvalidValue.value = value;

  late final ffi.Pointer<longword> _errCliCannotStartPLC =
      _lookup<longword>('errCliCannotStartPLC');

  int get errCliCannotStartPLC => _errCliCannotStartPLC.value;

  set errCliCannotStartPLC(int value) => _errCliCannotStartPLC.value = value;

  late final ffi.Pointer<longword> _errCliAlreadyRun =
      _lookup<longword>('errCliAlreadyRun');

  int get errCliAlreadyRun => _errCliAlreadyRun.value;

  set errCliAlreadyRun(int value) => _errCliAlreadyRun.value = value;

  late final ffi.Pointer<longword> _errCliCannotStopPLC =
      _lookup<longword>('errCliCannotStopPLC');

  int get errCliCannotStopPLC => _errCliCannotStopPLC.value;

  set errCliCannotStopPLC(int value) => _errCliCannotStopPLC.value = value;

  late final ffi.Pointer<longword> _errCliCannotCopyRamToRom =
      _lookup<longword>('errCliCannotCopyRamToRom');

  int get errCliCannotCopyRamToRom => _errCliCannotCopyRamToRom.value;

  set errCliCannotCopyRamToRom(int value) =>
      _errCliCannotCopyRamToRom.value = value;

  late final ffi.Pointer<longword> _errCliCannotCompress =
      _lookup<longword>('errCliCannotCompress');

  int get errCliCannotCompress => _errCliCannotCompress.value;

  set errCliCannotCompress(int value) => _errCliCannotCompress.value = value;

  late final ffi.Pointer<longword> _errCliAlreadyStop =
      _lookup<longword>('errCliAlreadyStop');

  int get errCliAlreadyStop => _errCliAlreadyStop.value;

  set errCliAlreadyStop(int value) => _errCliAlreadyStop.value = value;

  late final ffi.Pointer<longword> _errCliFunNotAvailable =
      _lookup<longword>('errCliFunNotAvailable');

  int get errCliFunNotAvailable => _errCliFunNotAvailable.value;

  set errCliFunNotAvailable(int value) => _errCliFunNotAvailable.value = value;

  late final ffi.Pointer<longword> _errCliUploadSequenceFailed =
      _lookup<longword>('errCliUploadSequenceFailed');

  int get errCliUploadSequenceFailed => _errCliUploadSequenceFailed.value;

  set errCliUploadSequenceFailed(int value) =>
      _errCliUploadSequenceFailed.value = value;

  late final ffi.Pointer<longword> _errCliInvalidDataSizeRecvd =
      _lookup<longword>('errCliInvalidDataSizeRecvd');

  int get errCliInvalidDataSizeRecvd => _errCliInvalidDataSizeRecvd.value;

  set errCliInvalidDataSizeRecvd(int value) =>
      _errCliInvalidDataSizeRecvd.value = value;

  late final ffi.Pointer<longword> _errCliInvalidBlockType =
      _lookup<longword>('errCliInvalidBlockType');

  int get errCliInvalidBlockType => _errCliInvalidBlockType.value;

  set errCliInvalidBlockType(int value) =>
      _errCliInvalidBlockType.value = value;

  late final ffi.Pointer<longword> _errCliInvalidBlockNumber =
      _lookup<longword>('errCliInvalidBlockNumber');

  int get errCliInvalidBlockNumber => _errCliInvalidBlockNumber.value;

  set errCliInvalidBlockNumber(int value) =>
      _errCliInvalidBlockNumber.value = value;

  late final ffi.Pointer<longword> _errCliInvalidBlockSize =
      _lookup<longword>('errCliInvalidBlockSize');

  int get errCliInvalidBlockSize => _errCliInvalidBlockSize.value;

  set errCliInvalidBlockSize(int value) =>
      _errCliInvalidBlockSize.value = value;

  late final ffi.Pointer<longword> _errCliDownloadSequenceFailed =
      _lookup<longword>('errCliDownloadSequenceFailed');

  int get errCliDownloadSequenceFailed => _errCliDownloadSequenceFailed.value;

  set errCliDownloadSequenceFailed(int value) =>
      _errCliDownloadSequenceFailed.value = value;

  late final ffi.Pointer<longword> _errCliInsertRefused =
      _lookup<longword>('errCliInsertRefused');

  int get errCliInsertRefused => _errCliInsertRefused.value;

  set errCliInsertRefused(int value) => _errCliInsertRefused.value = value;

  late final ffi.Pointer<longword> _errCliDeleteRefused =
      _lookup<longword>('errCliDeleteRefused');

  int get errCliDeleteRefused => _errCliDeleteRefused.value;

  set errCliDeleteRefused(int value) => _errCliDeleteRefused.value = value;

  late final ffi.Pointer<longword> _errCliNeedPassword =
      _lookup<longword>('errCliNeedPassword');

  int get errCliNeedPassword => _errCliNeedPassword.value;

  set errCliNeedPassword(int value) => _errCliNeedPassword.value = value;

  late final ffi.Pointer<longword> _errCliInvalidPassword =
      _lookup<longword>('errCliInvalidPassword');

  int get errCliInvalidPassword => _errCliInvalidPassword.value;

  set errCliInvalidPassword(int value) => _errCliInvalidPassword.value = value;

  late final ffi.Pointer<longword> _errCliNoPasswordToSetOrClear =
      _lookup<longword>('errCliNoPasswordToSetOrClear');

  int get errCliNoPasswordToSetOrClear => _errCliNoPasswordToSetOrClear.value;

  set errCliNoPasswordToSetOrClear(int value) =>
      _errCliNoPasswordToSetOrClear.value = value;

  late final ffi.Pointer<longword> _errCliJobTimeout =
      _lookup<longword>('errCliJobTimeout');

  int get errCliJobTimeout => _errCliJobTimeout.value;

  set errCliJobTimeout(int value) => _errCliJobTimeout.value = value;

  late final ffi.Pointer<longword> _errCliPartialDataRead =
      _lookup<longword>('errCliPartialDataRead');

  int get errCliPartialDataRead => _errCliPartialDataRead.value;

  set errCliPartialDataRead(int value) => _errCliPartialDataRead.value = value;

  late final ffi.Pointer<longword> _errCliBufferTooSmall =
      _lookup<longword>('errCliBufferTooSmall');

  int get errCliBufferTooSmall => _errCliBufferTooSmall.value;

  set errCliBufferTooSmall(int value) => _errCliBufferTooSmall.value = value;

  late final ffi.Pointer<longword> _errCliFunctionRefused =
      _lookup<longword>('errCliFunctionRefused');

  int get errCliFunctionRefused => _errCliFunctionRefused.value;

  set errCliFunctionRefused(int value) => _errCliFunctionRefused.value = value;

  late final ffi.Pointer<longword> _errCliDestroying =
      _lookup<longword>('errCliDestroying');

  int get errCliDestroying => _errCliDestroying.value;

  set errCliDestroying(int value) => _errCliDestroying.value = value;

  late final ffi.Pointer<longword> _errCliInvalidParamNumber =
      _lookup<longword>('errCliInvalidParamNumber');

  int get errCliInvalidParamNumber => _errCliInvalidParamNumber.value;

  set errCliInvalidParamNumber(int value) =>
      _errCliInvalidParamNumber.value = value;

  late final ffi.Pointer<longword> _errCliCannotChangeParam =
      _lookup<longword>('errCliCannotChangeParam');

  int get errCliCannotChangeParam => _errCliCannotChangeParam.value;

  set errCliCannotChangeParam(int value) =>
      _errCliCannotChangeParam.value = value;

  late final ffi.Pointer<ffi.Int> _MaxVars = _lookup<ffi.Int>('MaxVars');

  int get MaxVars => _MaxVars.value;

  set MaxVars(int value) => _MaxVars.value = value;

  late final ffi.Pointer<word> _CONNTYPE_PG = _lookup<word>('CONNTYPE_PG');

  int get CONNTYPE_PG => _CONNTYPE_PG.value;

  set CONNTYPE_PG(int value) => _CONNTYPE_PG.value = value;

  late final ffi.Pointer<word> _CONNTYPE_OP = _lookup<word>('CONNTYPE_OP');

  int get CONNTYPE_OP => _CONNTYPE_OP.value;

  set CONNTYPE_OP(int value) => _CONNTYPE_OP.value = value;

  late final ffi.Pointer<word> _CONNTYPE_BASIC =
      _lookup<word>('CONNTYPE_BASIC');

  int get CONNTYPE_BASIC => _CONNTYPE_BASIC.value;

  set CONNTYPE_BASIC(int value) => _CONNTYPE_BASIC.value = value;

  late final ffi.Pointer<byte> _S7AreaPE = _lookup<byte>('S7AreaPE');

  int get S7AreaPE => _S7AreaPE.value;

  set S7AreaPE(int value) => _S7AreaPE.value = value;

  late final ffi.Pointer<byte> _S7AreaPA = _lookup<byte>('S7AreaPA');

  int get S7AreaPA => _S7AreaPA.value;

  set S7AreaPA(int value) => _S7AreaPA.value = value;

  late final ffi.Pointer<byte> _S7AreaMK = _lookup<byte>('S7AreaMK');

  int get S7AreaMK => _S7AreaMK.value;

  set S7AreaMK(int value) => _S7AreaMK.value = value;

  late final ffi.Pointer<byte> _S7AreaDB = _lookup<byte>('S7AreaDB');

  int get S7AreaDB => _S7AreaDB.value;

  set S7AreaDB(int value) => _S7AreaDB.value = value;

  late final ffi.Pointer<byte> _S7AreaCT = _lookup<byte>('S7AreaCT');

  int get S7AreaCT => _S7AreaCT.value;

  set S7AreaCT(int value) => _S7AreaCT.value = value;

  late final ffi.Pointer<byte> _S7AreaTM = _lookup<byte>('S7AreaTM');

  int get S7AreaTM => _S7AreaTM.value;

  set S7AreaTM(int value) => _S7AreaTM.value = value;

  late final ffi.Pointer<ffi.Int> _S7WLBit = _lookup<ffi.Int>('S7WLBit');

  int get S7WLBit => _S7WLBit.value;

  set S7WLBit(int value) => _S7WLBit.value = value;

  late final ffi.Pointer<ffi.Int> _S7WLByte = _lookup<ffi.Int>('S7WLByte');

  int get S7WLByte => _S7WLByte.value;

  set S7WLByte(int value) => _S7WLByte.value = value;

  late final ffi.Pointer<ffi.Int> _S7WLWord = _lookup<ffi.Int>('S7WLWord');

  int get S7WLWord => _S7WLWord.value;

  set S7WLWord(int value) => _S7WLWord.value = value;

  late final ffi.Pointer<ffi.Int> _S7WLDWord = _lookup<ffi.Int>('S7WLDWord');

  int get S7WLDWord => _S7WLDWord.value;

  set S7WLDWord(int value) => _S7WLDWord.value = value;

  late final ffi.Pointer<ffi.Int> _S7WLReal = _lookup<ffi.Int>('S7WLReal');

  int get S7WLReal => _S7WLReal.value;

  set S7WLReal(int value) => _S7WLReal.value = value;

  late final ffi.Pointer<ffi.Int> _S7WLCounter =
      _lookup<ffi.Int>('S7WLCounter');

  int get S7WLCounter => _S7WLCounter.value;

  set S7WLCounter(int value) => _S7WLCounter.value = value;

  late final ffi.Pointer<ffi.Int> _S7WLTimer = _lookup<ffi.Int>('S7WLTimer');

  int get S7WLTimer => _S7WLTimer.value;

  set S7WLTimer(int value) => _S7WLTimer.value = value;

  late final ffi.Pointer<byte> _Block_OB = _lookup<byte>('Block_OB');

  int get Block_OB => _Block_OB.value;

  set Block_OB(int value) => _Block_OB.value = value;

  late final ffi.Pointer<byte> _Block_DB = _lookup<byte>('Block_DB');

  int get Block_DB => _Block_DB.value;

  set Block_DB(int value) => _Block_DB.value = value;

  late final ffi.Pointer<byte> _Block_SDB = _lookup<byte>('Block_SDB');

  int get Block_SDB => _Block_SDB.value;

  set Block_SDB(int value) => _Block_SDB.value = value;

  late final ffi.Pointer<byte> _Block_FC = _lookup<byte>('Block_FC');

  int get Block_FC => _Block_FC.value;

  set Block_FC(int value) => _Block_FC.value = value;

  late final ffi.Pointer<byte> _Block_SFC = _lookup<byte>('Block_SFC');

  int get Block_SFC => _Block_SFC.value;

  set Block_SFC(int value) => _Block_SFC.value = value;

  late final ffi.Pointer<byte> _Block_FB = _lookup<byte>('Block_FB');

  int get Block_FB => _Block_FB.value;

  set Block_FB(int value) => _Block_FB.value = value;

  late final ffi.Pointer<byte> _Block_SFB = _lookup<byte>('Block_SFB');

  int get Block_SFB => _Block_SFB.value;

  set Block_SFB(int value) => _Block_SFB.value = value;

  late final ffi.Pointer<byte> _SubBlk_OB = _lookup<byte>('SubBlk_OB');

  int get SubBlk_OB => _SubBlk_OB.value;

  set SubBlk_OB(int value) => _SubBlk_OB.value = value;

  late final ffi.Pointer<byte> _SubBlk_DB = _lookup<byte>('SubBlk_DB');

  int get SubBlk_DB => _SubBlk_DB.value;

  set SubBlk_DB(int value) => _SubBlk_DB.value = value;

  late final ffi.Pointer<byte> _SubBlk_SDB = _lookup<byte>('SubBlk_SDB');

  int get SubBlk_SDB => _SubBlk_SDB.value;

  set SubBlk_SDB(int value) => _SubBlk_SDB.value = value;

  late final ffi.Pointer<byte> _SubBlk_FC = _lookup<byte>('SubBlk_FC');

  int get SubBlk_FC => _SubBlk_FC.value;

  set SubBlk_FC(int value) => _SubBlk_FC.value = value;

  late final ffi.Pointer<byte> _SubBlk_SFC = _lookup<byte>('SubBlk_SFC');

  int get SubBlk_SFC => _SubBlk_SFC.value;

  set SubBlk_SFC(int value) => _SubBlk_SFC.value = value;

  late final ffi.Pointer<byte> _SubBlk_FB = _lookup<byte>('SubBlk_FB');

  int get SubBlk_FB => _SubBlk_FB.value;

  set SubBlk_FB(int value) => _SubBlk_FB.value = value;

  late final ffi.Pointer<byte> _SubBlk_SFB = _lookup<byte>('SubBlk_SFB');

  int get SubBlk_SFB => _SubBlk_SFB.value;

  set SubBlk_SFB(int value) => _SubBlk_SFB.value = value;

  late final ffi.Pointer<byte> _BlockLangAWL = _lookup<byte>('BlockLangAWL');

  int get BlockLangAWL => _BlockLangAWL.value;

  set BlockLangAWL(int value) => _BlockLangAWL.value = value;

  late final ffi.Pointer<byte> _BlockLangKOP = _lookup<byte>('BlockLangKOP');

  int get BlockLangKOP => _BlockLangKOP.value;

  set BlockLangKOP(int value) => _BlockLangKOP.value = value;

  late final ffi.Pointer<byte> _BlockLangFUP = _lookup<byte>('BlockLangFUP');

  int get BlockLangFUP => _BlockLangFUP.value;

  set BlockLangFUP(int value) => _BlockLangFUP.value = value;

  late final ffi.Pointer<byte> _BlockLangSCL = _lookup<byte>('BlockLangSCL');

  int get BlockLangSCL => _BlockLangSCL.value;

  set BlockLangSCL(int value) => _BlockLangSCL.value = value;

  late final ffi.Pointer<byte> _BlockLangDB = _lookup<byte>('BlockLangDB');

  int get BlockLangDB => _BlockLangDB.value;

  set BlockLangDB(int value) => _BlockLangDB.value = value;

  late final ffi.Pointer<byte> _BlockLangGRAPH =
      _lookup<byte>('BlockLangGRAPH');

  int get BlockLangGRAPH => _BlockLangGRAPH.value;

  set BlockLangGRAPH(int value) => _BlockLangGRAPH.value = value;

  int Cli_Create() {
    return _Cli_Create();
  }

  late final _Cli_CreatePtr =
      _lookup<ffi.NativeFunction<S7Object Function()>>('Cli_Create');
  late final _Cli_Create = _Cli_CreatePtr.asFunction<int Function()>();

  void Cli_Destroy(
    ffi.Pointer<S7Object> Client,
  ) {
    return _Cli_Destroy(
      Client,
    );
  }

  late final _Cli_DestroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<S7Object>)>>(
          'Cli_Destroy');
  late final _Cli_Destroy =
      _Cli_DestroyPtr.asFunction<void Function(ffi.Pointer<S7Object>)>();

  int Cli_ConnectTo(
    int Client,
    ffi.Pointer<ffi.Char> Address,
    int Rack,
    int Slot,
  ) {
    return _Cli_ConnectTo(
      Client,
      Address,
      Rack,
      Slot,
    );
  }

  late final _Cli_ConnectToPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(S7Object, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Int)>>('Cli_ConnectTo');
  late final _Cli_ConnectTo = _Cli_ConnectToPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, int, int)>();

  int Cli_SetConnectionParams(
    int Client,
    ffi.Pointer<ffi.Char> Address,
    int LocalTSAP,
    int RemoteTSAP,
  ) {
    return _Cli_SetConnectionParams(
      Client,
      Address,
      LocalTSAP,
      RemoteTSAP,
    );
  }

  late final _Cli_SetConnectionParamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(S7Object, ffi.Pointer<ffi.Char>, word,
              word)>>('Cli_SetConnectionParams');
  late final _Cli_SetConnectionParams = _Cli_SetConnectionParamsPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, int, int)>();

  int Cli_SetConnectionType(
    int Client,
    int ConnectionType,
  ) {
    return _Cli_SetConnectionType(
      Client,
      ConnectionType,
    );
  }

  late final _Cli_SetConnectionTypePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(S7Object, word)>>(
          'Cli_SetConnectionType');
  late final _Cli_SetConnectionType =
      _Cli_SetConnectionTypePtr.asFunction<int Function(int, int)>();

  int Cli_Connect(
    int Client,
  ) {
    return _Cli_Connect(
      Client,
    );
  }

  late final _Cli_ConnectPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(S7Object)>>('Cli_Connect');
  late final _Cli_Connect = _Cli_ConnectPtr.asFunction<int Function(int)>();

  int Cli_Disconnect(
    int Client,
  ) {
    return _Cli_Disconnect(
      Client,
    );
  }

  late final _Cli_DisconnectPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(S7Object)>>('Cli_Disconnect');
  late final _Cli_Disconnect =
      _Cli_DisconnectPtr.asFunction<int Function(int)>();

  int Cli_GetParam(
    int Client,
    int ParamNumber,
    ffi.Pointer<ffi.Void> pValue,
  ) {
    return _Cli_GetParam(
      Client,
      ParamNumber,
      pValue,
    );
  }

  late final _Cli_GetParamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              S7Object, ffi.Int, ffi.Pointer<ffi.Void>)>>('Cli_GetParam');
  late final _Cli_GetParam = _Cli_GetParamPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Void>)>();

  int Cli_SetParam(
    int Client,
    int ParamNumber,
    ffi.Pointer<ffi.Void> pValue,
  ) {
    return _Cli_SetParam(
      Client,
      ParamNumber,
      pValue,
    );
  }

  late final _Cli_SetParamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              S7Object, ffi.Int, ffi.Pointer<ffi.Void>)>>('Cli_SetParam');
  late final _Cli_SetParam = _Cli_SetParamPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Void>)>();

  int Cli_SetAsCallback(
    int Client,
    pfn_CliCompletion pCompletion,
    ffi.Pointer<ffi.Void> usrPtr,
  ) {
    return _Cli_SetAsCallback(
      Client,
      pCompletion,
      usrPtr,
    );
  }

  late final _Cli_SetAsCallbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(S7Object, pfn_CliCompletion,
              ffi.Pointer<ffi.Void>)>>('Cli_SetAsCallback');
  late final _Cli_SetAsCallback = _Cli_SetAsCallbackPtr.asFunction<
      int Function(int, pfn_CliCompletion, ffi.Pointer<ffi.Void>)>();

  int Cli_ReadArea(
    int Client,
    int Area,
    int DBNumber,
    int Start,
    int Amount,
    int WordLen,
    ffi.Pointer<ffi.Void> pUsrData,
  ) {
    return _Cli_ReadArea(
      Client,
      Area,
      DBNumber,
      Start,
      Amount,
      WordLen,
      pUsrData,
    );
  }

  late final _Cli_ReadAreaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(S7Object, ffi.Int, ffi.Int, ffi.Int, ffi.Int,
              ffi.Int, ffi.Pointer<ffi.Void>)>>('Cli_ReadArea');
  late final _Cli_ReadArea = _Cli_ReadAreaPtr.asFunction<
      int Function(int, int, int, int, int, int, ffi.Pointer<ffi.Void>)>();

  int Cli_WriteArea(
    int Client,
    int Area,
    int DBNumber,
    int Start,
    int Amount,
    int WordLen,
    ffi.Pointer<ffi.Void> pUsrData,
  ) {
    return _Cli_WriteArea(
      Client,
      Area,
      DBNumber,
      Start,
      Amount,
      WordLen,
      pUsrData,
    );
  }

  late final _Cli_WriteAreaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(S7Object, ffi.Int, ffi.Int, ffi.Int, ffi.Int,
              ffi.Int, ffi.Pointer<ffi.Void>)>>('Cli_WriteArea');
  late final _Cli_WriteArea = _Cli_WriteAreaPtr.asFunction<
      int Function(int, int, int, int, int, int, ffi.Pointer<ffi.Void>)>();

  int Cli_ReadMultiVars(
    int Client,
    PS7DataItem Item,
    int ItemsCount,
  ) {
    return _Cli_ReadMultiVars(
      Client,
      Item,
      ItemsCount,
    );
  }

  late final _Cli_ReadMultiVarsPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(S7Object, PS7DataItem, ffi.Int)>>(
      'Cli_ReadMultiVars');
  late final _Cli_ReadMultiVars =
      _Cli_ReadMultiVarsPtr.asFunction<int Function(int, PS7DataItem, int)>();

  int Cli_WriteMultiVars(
    int Client,
    PS7DataItem Item,
    int ItemsCount,
  ) {
    return _Cli_WriteMultiVars(
      Client,
      Item,
      ItemsCount,
    );
  }

  late final _Cli_WriteMultiVarsPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(S7Object, PS7DataItem, ffi.Int)>>(
      'Cli_WriteMultiVars');
  late final _Cli_WriteMultiVars =
      _Cli_WriteMultiVarsPtr.asFunction<int Function(int, PS7DataItem, int)>();

  int Cli_DBRead(
    int Client,
    int DBNumber,
    int Start,
    int Size,
    ffi.Pointer<ffi.Void> pUsrData,
  ) {
    return _Cli_DBRead(
      Client,
      DBNumber,
      Start,
      Size,
      pUsrData,
    );
  }

  late final _Cli_DBReadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(S7Object, ffi.Int, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('Cli_DBRead');
  late final _Cli_DBRead = _Cli_DBReadPtr.asFunction<
      int Function(int, int, int, int, ffi.Pointer<ffi.Void>)>();

  int Cli_DBWrite(
    int Client,
    int DBNumber,
    int Start,
    int Size,
    ffi.Pointer<ffi.Void> pUsrData,
  ) {
    return _Cli_DBWrite(
      Client,
      DBNumber,
      Start,
      Size,
      pUsrData,
    );
  }

  late final _Cli_DBWritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(S7Object, ffi.Int, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('Cli_DBWrite');
  late final _Cli_DBWrite = _Cli_DBWritePtr.asFunction<
      int Function(int, int, int, int, ffi.Pointer<ffi.Void>)>();

  int Cli_MBRead(
    int Client,
    int Start,
    int Size,
    ffi.Pointer<ffi.Void> pUsrData,
  ) {
    return _Cli_MBRead(
      Client,
      Start,
      Size,
      pUsrData,
    );
  }

  late final _Cli_MBReadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(S7Object, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('Cli_MBRead');
  late final _Cli_MBRead = _Cli_MBReadPtr.asFunction<
      int Function(int, int, int, ffi.Pointer<ffi.Void>)>();

  int Cli_MBWrite(
    int Client,
    int Start,
    int Size,
    ffi.Pointer<ffi.Void> pUsrData,
  ) {
    return _Cli_MBWrite(
      Client,
      Start,
      Size,
      pUsrData,
    );
  }

  late final _Cli_MBWritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(S7Object, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('Cli_MBWrite');
  late final _Cli_MBWrite = _Cli_MBWritePtr.asFunction<
      int Function(int, int, int, ffi.Pointer<ffi.Void>)>();

  int Cli_EBRead(
    int Client,
    int Start,
    int Size,
    ffi.Pointer<ffi.Void> pUsrData,
  ) {
    return _Cli_EBRead(
      Client,
      Start,
      Size,
      pUsrData,
    );
  }

  late final _Cli_EBReadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(S7Object, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('Cli_EBRead');
  late final _Cli_EBRead = _Cli_EBReadPtr.asFunction<
      int Function(int, int, int, ffi.Pointer<ffi.Void>)>();

  int Cli_EBWrite(
    int Client,
    int Start,
    int Size,
    ffi.Pointer<ffi.Void> pUsrData,
  ) {
    return _Cli_EBWrite(
      Client,
      Start,
      Size,
      pUsrData,
    );
  }

  late final _Cli_EBWritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(S7Object, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('Cli_EBWrite');
  late final _Cli_EBWrite = _Cli_EBWritePtr.asFunction<
      int Function(int, int, int, ffi.Pointer<ffi.Void>)>();

  int Cli_ABRead(
    int Client,
    int Start,
    int Size,
    ffi.Pointer<ffi.Void> pUsrData,
  ) {
    return _Cli_ABRead(
      Client,
      Start,
      Size,
      pUsrData,
    );
  }

  late final _Cli_ABReadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(S7Object, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('Cli_ABRead');
  late final _Cli_ABRead = _Cli_ABReadPtr.asFunction<
      int Function(int, int, int, ffi.Pointer<ffi.Void>)>();

  int Cli_ABWrite(
    int Client,
    int Start,
    int Size,
    ffi.Pointer<ffi.Void> pUsrData,
  ) {
    return _Cli_ABWrite(
      Client,
      Start,
      Size,
      pUsrData,
    );
  }

  late final _Cli_ABWritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(S7Object, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('Cli_ABWrite');
  late final _Cli_ABWrite = _Cli_ABWritePtr.asFunction<
      int Function(int, int, int, ffi.Pointer<ffi.Void>)>();

  int Cli_TMRead(
    int Client,
    int Start,
    int Amount,
    ffi.Pointer<ffi.Void> pUsrData,
  ) {
    return _Cli_TMRead(
      Client,
      Start,
      Amount,
      pUsrData,
    );
  }

  late final _Cli_TMReadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(S7Object, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('Cli_TMRead');
  late final _Cli_TMRead = _Cli_TMReadPtr.asFunction<
      int Function(int, int, int, ffi.Pointer<ffi.Void>)>();

  int Cli_TMWrite(
    int Client,
    int Start,
    int Amount,
    ffi.Pointer<ffi.Void> pUsrData,
  ) {
    return _Cli_TMWrite(
      Client,
      Start,
      Amount,
      pUsrData,
    );
  }

  late final _Cli_TMWritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(S7Object, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('Cli_TMWrite');
  late final _Cli_TMWrite = _Cli_TMWritePtr.asFunction<
      int Function(int, int, int, ffi.Pointer<ffi.Void>)>();

  int Cli_CTRead(
    int Client,
    int Start,
    int Amount,
    ffi.Pointer<ffi.Void> pUsrData,
  ) {
    return _Cli_CTRead(
      Client,
      Start,
      Amount,
      pUsrData,
    );
  }

  late final _Cli_CTReadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(S7Object, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('Cli_CTRead');
  late final _Cli_CTRead = _Cli_CTReadPtr.asFunction<
      int Function(int, int, int, ffi.Pointer<ffi.Void>)>();

  int Cli_CTWrite(
    int Client,
    int Start,
    int Amount,
    ffi.Pointer<ffi.Void> pUsrData,
  ) {
    return _Cli_CTWrite(
      Client,
      Start,
      Amount,
      pUsrData,
    );
  }

  late final _Cli_CTWritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(S7Object, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('Cli_CTWrite');
  late final _Cli_CTWrite = _Cli_CTWritePtr.asFunction<
      int Function(int, int, int, ffi.Pointer<ffi.Void>)>();

  int Cli_ListBlocks(
    int Client,
    ffi.Pointer<TS7BlocksList> pUsrData,
  ) {
    return _Cli_ListBlocks(
      Client,
      pUsrData,
    );
  }

  late final _Cli_ListBlocksPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              S7Object, ffi.Pointer<TS7BlocksList>)>>('Cli_ListBlocks');
  late final _Cli_ListBlocks = _Cli_ListBlocksPtr.asFunction<
      int Function(int, ffi.Pointer<TS7BlocksList>)>();

  int Cli_GetAgBlockInfo(
    int Client,
    int BlockType,
    int BlockNum,
    ffi.Pointer<TS7BlockInfo> pUsrData,
  ) {
    return _Cli_GetAgBlockInfo(
      Client,
      BlockType,
      BlockNum,
      pUsrData,
    );
  }

  late final _Cli_GetAgBlockInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(S7Object, ffi.Int, ffi.Int,
              ffi.Pointer<TS7BlockInfo>)>>('Cli_GetAgBlockInfo');
  late final _Cli_GetAgBlockInfo = _Cli_GetAgBlockInfoPtr.asFunction<
      int Function(int, int, int, ffi.Pointer<TS7BlockInfo>)>();

  int Cli_GetPgBlockInfo(
    int Client,
    ffi.Pointer<ffi.Void> pBlock,
    ffi.Pointer<TS7BlockInfo> pUsrData,
    int Size,
  ) {
    return _Cli_GetPgBlockInfo(
      Client,
      pBlock,
      pUsrData,
      Size,
    );
  }

  late final _Cli_GetPgBlockInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(S7Object, ffi.Pointer<ffi.Void>,
              ffi.Pointer<TS7BlockInfo>, ffi.Int)>>('Cli_GetPgBlockInfo');
  late final _Cli_GetPgBlockInfo = _Cli_GetPgBlockInfoPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Void>, ffi.Pointer<TS7BlockInfo>, int)>();

  int Cli_ListBlocksOfType(
    int Client,
    int BlockType,
    ffi.Pointer<ffi.Pointer<word>> pUsrData,
    ffi.Pointer<ffi.Int> ItemsCount,
  ) {
    return _Cli_ListBlocksOfType(
      Client,
      BlockType,
      pUsrData,
      ItemsCount,
    );
  }

  late final _Cli_ListBlocksOfTypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(S7Object, ffi.Int, ffi.Pointer<ffi.Pointer<word>>,
              ffi.Pointer<ffi.Int>)>>('Cli_ListBlocksOfType');
  late final _Cli_ListBlocksOfType = _Cli_ListBlocksOfTypePtr.asFunction<
      int Function(
          int, int, ffi.Pointer<ffi.Pointer<word>>, ffi.Pointer<ffi.Int>)>();

  int Cli_Upload(
    int Client,
    int BlockType,
    int BlockNum,
    ffi.Pointer<ffi.Void> pUsrData,
    ffi.Pointer<ffi.Int> Size,
  ) {
    return _Cli_Upload(
      Client,
      BlockType,
      BlockNum,
      pUsrData,
      Size,
    );
  }

  late final _Cli_UploadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(S7Object, ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Int>)>>('Cli_Upload');
  late final _Cli_Upload = _Cli_UploadPtr.asFunction<
      int Function(
          int, int, int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int>)>();

  int Cli_FullUpload(
    int Client,
    int BlockType,
    int BlockNum,
    ffi.Pointer<ffi.Void> pUsrData,
    ffi.Pointer<ffi.Int> Size,
  ) {
    return _Cli_FullUpload(
      Client,
      BlockType,
      BlockNum,
      pUsrData,
      Size,
    );
  }

  late final _Cli_FullUploadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(S7Object, ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Int>)>>('Cli_FullUpload');
  late final _Cli_FullUpload = _Cli_FullUploadPtr.asFunction<
      int Function(
          int, int, int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int>)>();

  int Cli_Download(
    int Client,
    int BlockNum,
    ffi.Pointer<ffi.Void> pUsrData,
    int Size,
  ) {
    return _Cli_Download(
      Client,
      BlockNum,
      pUsrData,
      Size,
    );
  }

  late final _Cli_DownloadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(S7Object, ffi.Int, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('Cli_Download');
  late final _Cli_Download = _Cli_DownloadPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Void>, int)>();

  int Cli_Delete(
    int Client,
    int BlockType,
    int BlockNum,
  ) {
    return _Cli_Delete(
      Client,
      BlockType,
      BlockNum,
    );
  }

  late final _Cli_DeletePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(S7Object, ffi.Int, ffi.Int)>>(
          'Cli_Delete');
  late final _Cli_Delete =
      _Cli_DeletePtr.asFunction<int Function(int, int, int)>();

  int Cli_DBGet(
    int Client,
    int DBNumber,
    ffi.Pointer<ffi.Void> pUsrData,
    ffi.Pointer<ffi.Int> Size,
  ) {
    return _Cli_DBGet(
      Client,
      DBNumber,
      pUsrData,
      Size,
    );
  }

  late final _Cli_DBGetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(S7Object, ffi.Int, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Int>)>>('Cli_DBGet');
  late final _Cli_DBGet = _Cli_DBGetPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int>)>();

  int Cli_DBFill(
    int Client,
    int DBNumber,
    int FillChar,
  ) {
    return _Cli_DBFill(
      Client,
      DBNumber,
      FillChar,
    );
  }

  late final _Cli_DBFillPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(S7Object, ffi.Int, ffi.Int)>>(
          'Cli_DBFill');
  late final _Cli_DBFill =
      _Cli_DBFillPtr.asFunction<int Function(int, int, int)>();

  int Cli_GetPlcDateTime(
    int Client,
    ffi.Pointer<tm1> DateTime,
  ) {
    return _Cli_GetPlcDateTime(
      Client,
      DateTime,
    );
  }

  late final _Cli_GetPlcDateTimePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(S7Object, ffi.Pointer<tm1>)>>(
          'Cli_GetPlcDateTime');
  late final _Cli_GetPlcDateTime =
      _Cli_GetPlcDateTimePtr.asFunction<int Function(int, ffi.Pointer<tm1>)>();

  int Cli_SetPlcDateTime(
    int Client,
    ffi.Pointer<tm1> DateTime,
  ) {
    return _Cli_SetPlcDateTime(
      Client,
      DateTime,
    );
  }

  late final _Cli_SetPlcDateTimePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(S7Object, ffi.Pointer<tm1>)>>(
          'Cli_SetPlcDateTime');
  late final _Cli_SetPlcDateTime =
      _Cli_SetPlcDateTimePtr.asFunction<int Function(int, ffi.Pointer<tm1>)>();

  int Cli_SetPlcSystemDateTime(
    int Client,
  ) {
    return _Cli_SetPlcSystemDateTime(
      Client,
    );
  }

  late final _Cli_SetPlcSystemDateTimePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(S7Object)>>(
          'Cli_SetPlcSystemDateTime');
  late final _Cli_SetPlcSystemDateTime =
      _Cli_SetPlcSystemDateTimePtr.asFunction<int Function(int)>();

  int Cli_GetOrderCode(
    int Client,
    ffi.Pointer<TS7OrderCode> pUsrData,
  ) {
    return _Cli_GetOrderCode(
      Client,
      pUsrData,
    );
  }

  late final _Cli_GetOrderCodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              S7Object, ffi.Pointer<TS7OrderCode>)>>('Cli_GetOrderCode');
  late final _Cli_GetOrderCode = _Cli_GetOrderCodePtr.asFunction<
      int Function(int, ffi.Pointer<TS7OrderCode>)>();

  int Cli_GetCpuInfo(
    int Client,
    ffi.Pointer<TS7CpuInfo> pUsrData,
  ) {
    return _Cli_GetCpuInfo(
      Client,
      pUsrData,
    );
  }

  late final _Cli_GetCpuInfoPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(S7Object, ffi.Pointer<TS7CpuInfo>)>>(
      'Cli_GetCpuInfo');
  late final _Cli_GetCpuInfo = _Cli_GetCpuInfoPtr.asFunction<
      int Function(int, ffi.Pointer<TS7CpuInfo>)>();

  int Cli_GetCpInfo(
    int Client,
    ffi.Pointer<TS7CpInfo> pUsrData,
  ) {
    return _Cli_GetCpInfo(
      Client,
      pUsrData,
    );
  }

  late final _Cli_GetCpInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(S7Object, ffi.Pointer<TS7CpInfo>)>>('Cli_GetCpInfo');
  late final _Cli_GetCpInfo =
      _Cli_GetCpInfoPtr.asFunction<int Function(int, ffi.Pointer<TS7CpInfo>)>();

  int Cli_ReadSZL(
    int Client,
    int ID,
    int Index,
    ffi.Pointer<TS7SZL> pUsrData,
    ffi.Pointer<ffi.Int> Size,
  ) {
    return _Cli_ReadSZL(
      Client,
      ID,
      Index,
      pUsrData,
      Size,
    );
  }

  late final _Cli_ReadSZLPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(S7Object, ffi.Int, ffi.Int, ffi.Pointer<TS7SZL>,
              ffi.Pointer<ffi.Int>)>>('Cli_ReadSZL');
  late final _Cli_ReadSZL = _Cli_ReadSZLPtr.asFunction<
      int Function(int, int, int, ffi.Pointer<TS7SZL>, ffi.Pointer<ffi.Int>)>();

  int Cli_ReadSZLList(
    int Client,
    ffi.Pointer<TS7SZLList> pUsrData,
    ffi.Pointer<ffi.Int> ItemsCount,
  ) {
    return _Cli_ReadSZLList(
      Client,
      pUsrData,
      ItemsCount,
    );
  }

  late final _Cli_ReadSZLListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(S7Object, ffi.Pointer<TS7SZLList>,
              ffi.Pointer<ffi.Int>)>>('Cli_ReadSZLList');
  late final _Cli_ReadSZLList = _Cli_ReadSZLListPtr.asFunction<
      int Function(int, ffi.Pointer<TS7SZLList>, ffi.Pointer<ffi.Int>)>();

  int Cli_PlcHotStart(
    int Client,
  ) {
    return _Cli_PlcHotStart(
      Client,
    );
  }

  late final _Cli_PlcHotStartPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(S7Object)>>(
          'Cli_PlcHotStart');
  late final _Cli_PlcHotStart =
      _Cli_PlcHotStartPtr.asFunction<int Function(int)>();

  int Cli_PlcColdStart(
    int Client,
  ) {
    return _Cli_PlcColdStart(
      Client,
    );
  }

  late final _Cli_PlcColdStartPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(S7Object)>>(
          'Cli_PlcColdStart');
  late final _Cli_PlcColdStart =
      _Cli_PlcColdStartPtr.asFunction<int Function(int)>();

  int Cli_PlcStop(
    int Client,
  ) {
    return _Cli_PlcStop(
      Client,
    );
  }

  late final _Cli_PlcStopPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(S7Object)>>('Cli_PlcStop');
  late final _Cli_PlcStop = _Cli_PlcStopPtr.asFunction<int Function(int)>();

  int Cli_CopyRamToRom(
    int Client,
    int Timeout,
  ) {
    return _Cli_CopyRamToRom(
      Client,
      Timeout,
    );
  }

  late final _Cli_CopyRamToRomPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(S7Object, ffi.Int)>>(
          'Cli_CopyRamToRom');
  late final _Cli_CopyRamToRom =
      _Cli_CopyRamToRomPtr.asFunction<int Function(int, int)>();

  int Cli_Compress(
    int Client,
    int Timeout,
  ) {
    return _Cli_Compress(
      Client,
      Timeout,
    );
  }

  late final _Cli_CompressPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(S7Object, ffi.Int)>>(
          'Cli_Compress');
  late final _Cli_Compress =
      _Cli_CompressPtr.asFunction<int Function(int, int)>();

  int Cli_GetPlcStatus(
    int Client,
    ffi.Pointer<ffi.Int> Status,
  ) {
    return _Cli_GetPlcStatus(
      Client,
      Status,
    );
  }

  late final _Cli_GetPlcStatusPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(S7Object, ffi.Pointer<ffi.Int>)>>(
      'Cli_GetPlcStatus');
  late final _Cli_GetPlcStatus = _Cli_GetPlcStatusPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Int>)>();

  int Cli_GetProtection(
    int Client,
    ffi.Pointer<TS7Protection> pUsrData,
  ) {
    return _Cli_GetProtection(
      Client,
      pUsrData,
    );
  }

  late final _Cli_GetProtectionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              S7Object, ffi.Pointer<TS7Protection>)>>('Cli_GetProtection');
  late final _Cli_GetProtection = _Cli_GetProtectionPtr.asFunction<
      int Function(int, ffi.Pointer<TS7Protection>)>();

  int Cli_SetSessionPassword(
    int Client,
    ffi.Pointer<ffi.Char> Password,
  ) {
    return _Cli_SetSessionPassword(
      Client,
      Password,
    );
  }

  late final _Cli_SetSessionPasswordPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(S7Object, ffi.Pointer<ffi.Char>)>>(
      'Cli_SetSessionPassword');
  late final _Cli_SetSessionPassword = _Cli_SetSessionPasswordPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>)>();

  int Cli_ClearSessionPassword(
    int Client,
  ) {
    return _Cli_ClearSessionPassword(
      Client,
    );
  }

  late final _Cli_ClearSessionPasswordPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(S7Object)>>(
          'Cli_ClearSessionPassword');
  late final _Cli_ClearSessionPassword =
      _Cli_ClearSessionPasswordPtr.asFunction<int Function(int)>();

  int Cli_IsoExchangeBuffer(
    int Client,
    ffi.Pointer<ffi.Void> pUsrData,
    ffi.Pointer<ffi.Int> Size,
  ) {
    return _Cli_IsoExchangeBuffer(
      Client,
      pUsrData,
      Size,
    );
  }

  late final _Cli_IsoExchangeBufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(S7Object, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Int>)>>('Cli_IsoExchangeBuffer');
  late final _Cli_IsoExchangeBuffer = _Cli_IsoExchangeBufferPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int>)>();

  int Cli_GetExecTime(
    int Client,
    ffi.Pointer<ffi.Int> Time,
  ) {
    return _Cli_GetExecTime(
      Client,
      Time,
    );
  }

  late final _Cli_GetExecTimePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(S7Object, ffi.Pointer<ffi.Int>)>>(
      'Cli_GetExecTime');
  late final _Cli_GetExecTime =
      _Cli_GetExecTimePtr.asFunction<int Function(int, ffi.Pointer<ffi.Int>)>();

  int Cli_GetLastError(
    int Client,
    ffi.Pointer<ffi.Int> LastError,
  ) {
    return _Cli_GetLastError(
      Client,
      LastError,
    );
  }

  late final _Cli_GetLastErrorPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(S7Object, ffi.Pointer<ffi.Int>)>>(
      'Cli_GetLastError');
  late final _Cli_GetLastError = _Cli_GetLastErrorPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Int>)>();

  int Cli_GetPduLength(
    int Client,
    ffi.Pointer<ffi.Int> Requested,
    ffi.Pointer<ffi.Int> Negotiated,
  ) {
    return _Cli_GetPduLength(
      Client,
      Requested,
      Negotiated,
    );
  }

  late final _Cli_GetPduLengthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(S7Object, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('Cli_GetPduLength');
  late final _Cli_GetPduLength = _Cli_GetPduLengthPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  int Cli_ErrorText(
    int Error,
    ffi.Pointer<ffi.Char> Text,
    int TextLen,
  ) {
    return _Cli_ErrorText(
      Error,
      Text,
      TextLen,
    );
  }

  late final _Cli_ErrorTextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('Cli_ErrorText');
  late final _Cli_ErrorText = _Cli_ErrorTextPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int Cli_GetConnected(
    int Client,
    ffi.Pointer<ffi.Int> Connected,
  ) {
    return _Cli_GetConnected(
      Client,
      Connected,
    );
  }

  late final _Cli_GetConnectedPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(S7Object, ffi.Pointer<ffi.Int>)>>(
      'Cli_GetConnected');
  late final _Cli_GetConnected = _Cli_GetConnectedPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Int>)>();

  int Cli_AsReadArea(
    int Client,
    int Area,
    int DBNumber,
    int Start,
    int Amount,
    int WordLen,
    ffi.Pointer<ffi.Void> pUsrData,
  ) {
    return _Cli_AsReadArea(
      Client,
      Area,
      DBNumber,
      Start,
      Amount,
      WordLen,
      pUsrData,
    );
  }

  late final _Cli_AsReadAreaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(S7Object, ffi.Int, ffi.Int, ffi.Int, ffi.Int,
              ffi.Int, ffi.Pointer<ffi.Void>)>>('Cli_AsReadArea');
  late final _Cli_AsReadArea = _Cli_AsReadAreaPtr.asFunction<
      int Function(int, int, int, int, int, int, ffi.Pointer<ffi.Void>)>();

  int Cli_AsWriteArea(
    int Client,
    int Area,
    int DBNumber,
    int Start,
    int Amount,
    int WordLen,
    ffi.Pointer<ffi.Void> pUsrData,
  ) {
    return _Cli_AsWriteArea(
      Client,
      Area,
      DBNumber,
      Start,
      Amount,
      WordLen,
      pUsrData,
    );
  }

  late final _Cli_AsWriteAreaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(S7Object, ffi.Int, ffi.Int, ffi.Int, ffi.Int,
              ffi.Int, ffi.Pointer<ffi.Void>)>>('Cli_AsWriteArea');
  late final _Cli_AsWriteArea = _Cli_AsWriteAreaPtr.asFunction<
      int Function(int, int, int, int, int, int, ffi.Pointer<ffi.Void>)>();

  int Cli_AsDBRead(
    int Client,
    int DBNumber,
    int Start,
    int Size,
    ffi.Pointer<ffi.Void> pUsrData,
  ) {
    return _Cli_AsDBRead(
      Client,
      DBNumber,
      Start,
      Size,
      pUsrData,
    );
  }

  late final _Cli_AsDBReadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(S7Object, ffi.Int, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('Cli_AsDBRead');
  late final _Cli_AsDBRead = _Cli_AsDBReadPtr.asFunction<
      int Function(int, int, int, int, ffi.Pointer<ffi.Void>)>();

  int Cli_AsDBWrite(
    int Client,
    int DBNumber,
    int Start,
    int Size,
    ffi.Pointer<ffi.Void> pUsrData,
  ) {
    return _Cli_AsDBWrite(
      Client,
      DBNumber,
      Start,
      Size,
      pUsrData,
    );
  }

  late final _Cli_AsDBWritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(S7Object, ffi.Int, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('Cli_AsDBWrite');
  late final _Cli_AsDBWrite = _Cli_AsDBWritePtr.asFunction<
      int Function(int, int, int, int, ffi.Pointer<ffi.Void>)>();

  int Cli_AsMBRead(
    int Client,
    int Start,
    int Size,
    ffi.Pointer<ffi.Void> pUsrData,
  ) {
    return _Cli_AsMBRead(
      Client,
      Start,
      Size,
      pUsrData,
    );
  }

  late final _Cli_AsMBReadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(S7Object, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('Cli_AsMBRead');
  late final _Cli_AsMBRead = _Cli_AsMBReadPtr.asFunction<
      int Function(int, int, int, ffi.Pointer<ffi.Void>)>();

  int Cli_AsMBWrite(
    int Client,
    int Start,
    int Size,
    ffi.Pointer<ffi.Void> pUsrData,
  ) {
    return _Cli_AsMBWrite(
      Client,
      Start,
      Size,
      pUsrData,
    );
  }

  late final _Cli_AsMBWritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(S7Object, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('Cli_AsMBWrite');
  late final _Cli_AsMBWrite = _Cli_AsMBWritePtr.asFunction<
      int Function(int, int, int, ffi.Pointer<ffi.Void>)>();

  int Cli_AsEBRead(
    int Client,
    int Start,
    int Size,
    ffi.Pointer<ffi.Void> pUsrData,
  ) {
    return _Cli_AsEBRead(
      Client,
      Start,
      Size,
      pUsrData,
    );
  }

  late final _Cli_AsEBReadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(S7Object, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('Cli_AsEBRead');
  late final _Cli_AsEBRead = _Cli_AsEBReadPtr.asFunction<
      int Function(int, int, int, ffi.Pointer<ffi.Void>)>();

  int Cli_AsEBWrite(
    int Client,
    int Start,
    int Size,
    ffi.Pointer<ffi.Void> pUsrData,
  ) {
    return _Cli_AsEBWrite(
      Client,
      Start,
      Size,
      pUsrData,
    );
  }

  late final _Cli_AsEBWritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(S7Object, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('Cli_AsEBWrite');
  late final _Cli_AsEBWrite = _Cli_AsEBWritePtr.asFunction<
      int Function(int, int, int, ffi.Pointer<ffi.Void>)>();

  int Cli_AsABRead(
    int Client,
    int Start,
    int Size,
    ffi.Pointer<ffi.Void> pUsrData,
  ) {
    return _Cli_AsABRead(
      Client,
      Start,
      Size,
      pUsrData,
    );
  }

  late final _Cli_AsABReadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(S7Object, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('Cli_AsABRead');
  late final _Cli_AsABRead = _Cli_AsABReadPtr.asFunction<
      int Function(int, int, int, ffi.Pointer<ffi.Void>)>();

  int Cli_AsABWrite(
    int Client,
    int Start,
    int Size,
    ffi.Pointer<ffi.Void> pUsrData,
  ) {
    return _Cli_AsABWrite(
      Client,
      Start,
      Size,
      pUsrData,
    );
  }

  late final _Cli_AsABWritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(S7Object, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('Cli_AsABWrite');
  late final _Cli_AsABWrite = _Cli_AsABWritePtr.asFunction<
      int Function(int, int, int, ffi.Pointer<ffi.Void>)>();

  int Cli_AsTMRead(
    int Client,
    int Start,
    int Amount,
    ffi.Pointer<ffi.Void> pUsrData,
  ) {
    return _Cli_AsTMRead(
      Client,
      Start,
      Amount,
      pUsrData,
    );
  }

  late final _Cli_AsTMReadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(S7Object, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('Cli_AsTMRead');
  late final _Cli_AsTMRead = _Cli_AsTMReadPtr.asFunction<
      int Function(int, int, int, ffi.Pointer<ffi.Void>)>();

  int Cli_AsTMWrite(
    int Client,
    int Start,
    int Amount,
    ffi.Pointer<ffi.Void> pUsrData,
  ) {
    return _Cli_AsTMWrite(
      Client,
      Start,
      Amount,
      pUsrData,
    );
  }

  late final _Cli_AsTMWritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(S7Object, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('Cli_AsTMWrite');
  late final _Cli_AsTMWrite = _Cli_AsTMWritePtr.asFunction<
      int Function(int, int, int, ffi.Pointer<ffi.Void>)>();

  int Cli_AsCTRead(
    int Client,
    int Start,
    int Amount,
    ffi.Pointer<ffi.Void> pUsrData,
  ) {
    return _Cli_AsCTRead(
      Client,
      Start,
      Amount,
      pUsrData,
    );
  }

  late final _Cli_AsCTReadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(S7Object, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('Cli_AsCTRead');
  late final _Cli_AsCTRead = _Cli_AsCTReadPtr.asFunction<
      int Function(int, int, int, ffi.Pointer<ffi.Void>)>();

  int Cli_AsCTWrite(
    int Client,
    int Start,
    int Amount,
    ffi.Pointer<ffi.Void> pUsrData,
  ) {
    return _Cli_AsCTWrite(
      Client,
      Start,
      Amount,
      pUsrData,
    );
  }

  late final _Cli_AsCTWritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(S7Object, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('Cli_AsCTWrite');
  late final _Cli_AsCTWrite = _Cli_AsCTWritePtr.asFunction<
      int Function(int, int, int, ffi.Pointer<ffi.Void>)>();

  int Cli_AsListBlocksOfType(
    int Client,
    int BlockType,
    ffi.Pointer<ffi.Pointer<word>> pUsrData,
    ffi.Pointer<ffi.Int> ItemsCount,
  ) {
    return _Cli_AsListBlocksOfType(
      Client,
      BlockType,
      pUsrData,
      ItemsCount,
    );
  }

  late final _Cli_AsListBlocksOfTypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(S7Object, ffi.Int, ffi.Pointer<ffi.Pointer<word>>,
              ffi.Pointer<ffi.Int>)>>('Cli_AsListBlocksOfType');
  late final _Cli_AsListBlocksOfType = _Cli_AsListBlocksOfTypePtr.asFunction<
      int Function(
          int, int, ffi.Pointer<ffi.Pointer<word>>, ffi.Pointer<ffi.Int>)>();

  int Cli_AsReadSZL(
    int Client,
    int ID,
    int Index,
    ffi.Pointer<TS7SZL> pUsrData,
    ffi.Pointer<ffi.Int> Size,
  ) {
    return _Cli_AsReadSZL(
      Client,
      ID,
      Index,
      pUsrData,
      Size,
    );
  }

  late final _Cli_AsReadSZLPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(S7Object, ffi.Int, ffi.Int, ffi.Pointer<TS7SZL>,
              ffi.Pointer<ffi.Int>)>>('Cli_AsReadSZL');
  late final _Cli_AsReadSZL = _Cli_AsReadSZLPtr.asFunction<
      int Function(int, int, int, ffi.Pointer<TS7SZL>, ffi.Pointer<ffi.Int>)>();

  int Cli_AsReadSZLList(
    int Client,
    ffi.Pointer<TS7SZLList> pUsrData,
    ffi.Pointer<ffi.Int> ItemsCount,
  ) {
    return _Cli_AsReadSZLList(
      Client,
      pUsrData,
      ItemsCount,
    );
  }

  late final _Cli_AsReadSZLListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(S7Object, ffi.Pointer<TS7SZLList>,
              ffi.Pointer<ffi.Int>)>>('Cli_AsReadSZLList');
  late final _Cli_AsReadSZLList = _Cli_AsReadSZLListPtr.asFunction<
      int Function(int, ffi.Pointer<TS7SZLList>, ffi.Pointer<ffi.Int>)>();

  int Cli_AsUpload(
    int Client,
    int BlockType,
    int BlockNum,
    ffi.Pointer<ffi.Void> pUsrData,
    ffi.Pointer<ffi.Int> Size,
  ) {
    return _Cli_AsUpload(
      Client,
      BlockType,
      BlockNum,
      pUsrData,
      Size,
    );
  }

  late final _Cli_AsUploadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(S7Object, ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Int>)>>('Cli_AsUpload');
  late final _Cli_AsUpload = _Cli_AsUploadPtr.asFunction<
      int Function(
          int, int, int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int>)>();

  int Cli_AsFullUpload(
    int Client,
    int BlockType,
    int BlockNum,
    ffi.Pointer<ffi.Void> pUsrData,
    ffi.Pointer<ffi.Int> Size,
  ) {
    return _Cli_AsFullUpload(
      Client,
      BlockType,
      BlockNum,
      pUsrData,
      Size,
    );
  }

  late final _Cli_AsFullUploadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(S7Object, ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Int>)>>('Cli_AsFullUpload');
  late final _Cli_AsFullUpload = _Cli_AsFullUploadPtr.asFunction<
      int Function(
          int, int, int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int>)>();

  int Cli_AsDownload(
    int Client,
    int BlockNum,
    ffi.Pointer<ffi.Void> pUsrData,
    int Size,
  ) {
    return _Cli_AsDownload(
      Client,
      BlockNum,
      pUsrData,
      Size,
    );
  }

  late final _Cli_AsDownloadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(S7Object, ffi.Int, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('Cli_AsDownload');
  late final _Cli_AsDownload = _Cli_AsDownloadPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Void>, int)>();

  int Cli_AsCopyRamToRom(
    int Client,
    int Timeout,
  ) {
    return _Cli_AsCopyRamToRom(
      Client,
      Timeout,
    );
  }

  late final _Cli_AsCopyRamToRomPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(S7Object, ffi.Int)>>(
          'Cli_AsCopyRamToRom');
  late final _Cli_AsCopyRamToRom =
      _Cli_AsCopyRamToRomPtr.asFunction<int Function(int, int)>();

  int Cli_AsCompress(
    int Client,
    int Timeout,
  ) {
    return _Cli_AsCompress(
      Client,
      Timeout,
    );
  }

  late final _Cli_AsCompressPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(S7Object, ffi.Int)>>(
          'Cli_AsCompress');
  late final _Cli_AsCompress =
      _Cli_AsCompressPtr.asFunction<int Function(int, int)>();

  int Cli_AsDBGet(
    int Client,
    int DBNumber,
    ffi.Pointer<ffi.Void> pUsrData,
    ffi.Pointer<ffi.Int> Size,
  ) {
    return _Cli_AsDBGet(
      Client,
      DBNumber,
      pUsrData,
      Size,
    );
  }

  late final _Cli_AsDBGetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(S7Object, ffi.Int, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Int>)>>('Cli_AsDBGet');
  late final _Cli_AsDBGet = _Cli_AsDBGetPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int>)>();

  int Cli_AsDBFill(
    int Client,
    int DBNumber,
    int FillChar,
  ) {
    return _Cli_AsDBFill(
      Client,
      DBNumber,
      FillChar,
    );
  }

  late final _Cli_AsDBFillPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(S7Object, ffi.Int, ffi.Int)>>(
          'Cli_AsDBFill');
  late final _Cli_AsDBFill =
      _Cli_AsDBFillPtr.asFunction<int Function(int, int, int)>();

  int Cli_CheckAsCompletion(
    int Client,
    ffi.Pointer<ffi.Int> opResult,
  ) {
    return _Cli_CheckAsCompletion(
      Client,
      opResult,
    );
  }

  late final _Cli_CheckAsCompletionPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(S7Object, ffi.Pointer<ffi.Int>)>>(
      'Cli_CheckAsCompletion');
  late final _Cli_CheckAsCompletion = _Cli_CheckAsCompletionPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Int>)>();

  int Cli_WaitAsCompletion(
    int Client,
    int Timeout,
  ) {
    return _Cli_WaitAsCompletion(
      Client,
      Timeout,
    );
  }

  late final _Cli_WaitAsCompletionPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(S7Object, ffi.Int)>>(
          'Cli_WaitAsCompletion');
  late final _Cli_WaitAsCompletion =
      _Cli_WaitAsCompletionPtr.asFunction<int Function(int, int)>();

  late final ffi.Pointer<ffi.Int> _OperationRead =
      _lookup<ffi.Int>('OperationRead');

  int get OperationRead => _OperationRead.value;

  set OperationRead(int value) => _OperationRead.value = value;

  late final ffi.Pointer<ffi.Int> _OperationWrite =
      _lookup<ffi.Int>('OperationWrite');

  int get OperationWrite => _OperationWrite.value;

  set OperationWrite(int value) => _OperationWrite.value = value;

  late final ffi.Pointer<ffi.Int> _mkEvent = _lookup<ffi.Int>('mkEvent');

  int get mkEvent => _mkEvent.value;

  set mkEvent(int value) => _mkEvent.value = value;

  late final ffi.Pointer<ffi.Int> _mkLog = _lookup<ffi.Int>('mkLog');

  int get mkLog => _mkLog.value;

  set mkLog(int value) => _mkLog.value = value;

  late final ffi.Pointer<ffi.Int> _srvAreaPE = _lookup<ffi.Int>('srvAreaPE');

  int get srvAreaPE => _srvAreaPE.value;

  set srvAreaPE(int value) => _srvAreaPE.value = value;

  late final ffi.Pointer<ffi.Int> _srvAreaPA = _lookup<ffi.Int>('srvAreaPA');

  int get srvAreaPA => _srvAreaPA.value;

  set srvAreaPA(int value) => _srvAreaPA.value = value;

  late final ffi.Pointer<ffi.Int> _srvAreaMK = _lookup<ffi.Int>('srvAreaMK');

  int get srvAreaMK => _srvAreaMK.value;

  set srvAreaMK(int value) => _srvAreaMK.value = value;

  late final ffi.Pointer<ffi.Int> _srvAreaCT = _lookup<ffi.Int>('srvAreaCT');

  int get srvAreaCT => _srvAreaCT.value;

  set srvAreaCT(int value) => _srvAreaCT.value = value;

  late final ffi.Pointer<ffi.Int> _srvAreaTM = _lookup<ffi.Int>('srvAreaTM');

  int get srvAreaTM => _srvAreaTM.value;

  set srvAreaTM(int value) => _srvAreaTM.value = value;

  late final ffi.Pointer<ffi.Int> _srvAreaDB = _lookup<ffi.Int>('srvAreaDB');

  int get srvAreaDB => _srvAreaDB.value;

  set srvAreaDB(int value) => _srvAreaDB.value = value;

  late final ffi.Pointer<longword> _errSrvCannotStart =
      _lookup<longword>('errSrvCannotStart');

  int get errSrvCannotStart => _errSrvCannotStart.value;

  set errSrvCannotStart(int value) => _errSrvCannotStart.value = value;

  late final ffi.Pointer<longword> _errSrvDBNullPointer =
      _lookup<longword>('errSrvDBNullPointer');

  int get errSrvDBNullPointer => _errSrvDBNullPointer.value;

  set errSrvDBNullPointer(int value) => _errSrvDBNullPointer.value = value;

  late final ffi.Pointer<longword> _errSrvAreaAlreadyExists =
      _lookup<longword>('errSrvAreaAlreadyExists');

  int get errSrvAreaAlreadyExists => _errSrvAreaAlreadyExists.value;

  set errSrvAreaAlreadyExists(int value) =>
      _errSrvAreaAlreadyExists.value = value;

  late final ffi.Pointer<longword> _errSrvUnknownArea =
      _lookup<longword>('errSrvUnknownArea');

  int get errSrvUnknownArea => _errSrvUnknownArea.value;

  set errSrvUnknownArea(int value) => _errSrvUnknownArea.value = value;

  late final ffi.Pointer<longword> _errSrvInvalidParams =
      _lookup<longword>('errSrvInvalidParams');

  int get errSrvInvalidParams => _errSrvInvalidParams.value;

  set errSrvInvalidParams(int value) => _errSrvInvalidParams.value = value;

  late final ffi.Pointer<longword> _errSrvTooManyDB =
      _lookup<longword>('errSrvTooManyDB');

  int get errSrvTooManyDB => _errSrvTooManyDB.value;

  set errSrvTooManyDB(int value) => _errSrvTooManyDB.value = value;

  late final ffi.Pointer<longword> _errSrvInvalidParamNumber =
      _lookup<longword>('errSrvInvalidParamNumber');

  int get errSrvInvalidParamNumber => _errSrvInvalidParamNumber.value;

  set errSrvInvalidParamNumber(int value) =>
      _errSrvInvalidParamNumber.value = value;

  late final ffi.Pointer<longword> _errSrvCannotChangeParam =
      _lookup<longword>('errSrvCannotChangeParam');

  int get errSrvCannotChangeParam => _errSrvCannotChangeParam.value;

  set errSrvCannotChangeParam(int value) =>
      _errSrvCannotChangeParam.value = value;

  late final ffi.Pointer<longword> _evcServerStarted =
      _lookup<longword>('evcServerStarted');

  int get evcServerStarted => _evcServerStarted.value;

  set evcServerStarted(int value) => _evcServerStarted.value = value;

  late final ffi.Pointer<longword> _evcServerStopped =
      _lookup<longword>('evcServerStopped');

  int get evcServerStopped => _evcServerStopped.value;

  set evcServerStopped(int value) => _evcServerStopped.value = value;

  late final ffi.Pointer<longword> _evcListenerCannotStart =
      _lookup<longword>('evcListenerCannotStart');

  int get evcListenerCannotStart => _evcListenerCannotStart.value;

  set evcListenerCannotStart(int value) =>
      _evcListenerCannotStart.value = value;

  late final ffi.Pointer<longword> _evcClientAdded =
      _lookup<longword>('evcClientAdded');

  int get evcClientAdded => _evcClientAdded.value;

  set evcClientAdded(int value) => _evcClientAdded.value = value;

  late final ffi.Pointer<longword> _evcClientRejected =
      _lookup<longword>('evcClientRejected');

  int get evcClientRejected => _evcClientRejected.value;

  set evcClientRejected(int value) => _evcClientRejected.value = value;

  late final ffi.Pointer<longword> _evcClientNoRoom =
      _lookup<longword>('evcClientNoRoom');

  int get evcClientNoRoom => _evcClientNoRoom.value;

  set evcClientNoRoom(int value) => _evcClientNoRoom.value = value;

  late final ffi.Pointer<longword> _evcClientException =
      _lookup<longword>('evcClientException');

  int get evcClientException => _evcClientException.value;

  set evcClientException(int value) => _evcClientException.value = value;

  late final ffi.Pointer<longword> _evcClientDisconnected =
      _lookup<longword>('evcClientDisconnected');

  int get evcClientDisconnected => _evcClientDisconnected.value;

  set evcClientDisconnected(int value) => _evcClientDisconnected.value = value;

  late final ffi.Pointer<longword> _evcClientTerminated =
      _lookup<longword>('evcClientTerminated');

  int get evcClientTerminated => _evcClientTerminated.value;

  set evcClientTerminated(int value) => _evcClientTerminated.value = value;

  late final ffi.Pointer<longword> _evcClientsDropped =
      _lookup<longword>('evcClientsDropped');

  int get evcClientsDropped => _evcClientsDropped.value;

  set evcClientsDropped(int value) => _evcClientsDropped.value = value;

  late final ffi.Pointer<longword> _evcReserved_00000400 =
      _lookup<longword>('evcReserved_00000400');

  int get evcReserved_00000400 => _evcReserved_00000400.value;

  set evcReserved_00000400(int value) => _evcReserved_00000400.value = value;

  late final ffi.Pointer<longword> _evcReserved_00000800 =
      _lookup<longword>('evcReserved_00000800');

  int get evcReserved_00000800 => _evcReserved_00000800.value;

  set evcReserved_00000800(int value) => _evcReserved_00000800.value = value;

  late final ffi.Pointer<longword> _evcReserved_00001000 =
      _lookup<longword>('evcReserved_00001000');

  int get evcReserved_00001000 => _evcReserved_00001000.value;

  set evcReserved_00001000(int value) => _evcReserved_00001000.value = value;

  late final ffi.Pointer<longword> _evcReserved_00002000 =
      _lookup<longword>('evcReserved_00002000');

  int get evcReserved_00002000 => _evcReserved_00002000.value;

  set evcReserved_00002000(int value) => _evcReserved_00002000.value = value;

  late final ffi.Pointer<longword> _evcReserved_00004000 =
      _lookup<longword>('evcReserved_00004000');

  int get evcReserved_00004000 => _evcReserved_00004000.value;

  set evcReserved_00004000(int value) => _evcReserved_00004000.value = value;

  late final ffi.Pointer<longword> _evcReserved_00008000 =
      _lookup<longword>('evcReserved_00008000');

  int get evcReserved_00008000 => _evcReserved_00008000.value;

  set evcReserved_00008000(int value) => _evcReserved_00008000.value = value;

  late final ffi.Pointer<longword> _evcPDUincoming =
      _lookup<longword>('evcPDUincoming');

  int get evcPDUincoming => _evcPDUincoming.value;

  set evcPDUincoming(int value) => _evcPDUincoming.value = value;

  late final ffi.Pointer<longword> _evcDataRead =
      _lookup<longword>('evcDataRead');

  int get evcDataRead => _evcDataRead.value;

  set evcDataRead(int value) => _evcDataRead.value = value;

  late final ffi.Pointer<longword> _evcDataWrite =
      _lookup<longword>('evcDataWrite');

  int get evcDataWrite => _evcDataWrite.value;

  set evcDataWrite(int value) => _evcDataWrite.value = value;

  late final ffi.Pointer<longword> _evcNegotiatePDU =
      _lookup<longword>('evcNegotiatePDU');

  int get evcNegotiatePDU => _evcNegotiatePDU.value;

  set evcNegotiatePDU(int value) => _evcNegotiatePDU.value = value;

  late final ffi.Pointer<longword> _evcReadSZL =
      _lookup<longword>('evcReadSZL');

  int get evcReadSZL => _evcReadSZL.value;

  set evcReadSZL(int value) => _evcReadSZL.value = value;

  late final ffi.Pointer<longword> _evcClock = _lookup<longword>('evcClock');

  int get evcClock => _evcClock.value;

  set evcClock(int value) => _evcClock.value = value;

  late final ffi.Pointer<longword> _evcUpload = _lookup<longword>('evcUpload');

  int get evcUpload => _evcUpload.value;

  set evcUpload(int value) => _evcUpload.value = value;

  late final ffi.Pointer<longword> _evcDownload =
      _lookup<longword>('evcDownload');

  int get evcDownload => _evcDownload.value;

  set evcDownload(int value) => _evcDownload.value = value;

  late final ffi.Pointer<longword> _evcDirectory =
      _lookup<longword>('evcDirectory');

  int get evcDirectory => _evcDirectory.value;

  set evcDirectory(int value) => _evcDirectory.value = value;

  late final ffi.Pointer<longword> _evcSecurity =
      _lookup<longword>('evcSecurity');

  int get evcSecurity => _evcSecurity.value;

  set evcSecurity(int value) => _evcSecurity.value = value;

  late final ffi.Pointer<longword> _evcControl =
      _lookup<longword>('evcControl');

  int get evcControl => _evcControl.value;

  set evcControl(int value) => _evcControl.value = value;

  late final ffi.Pointer<longword> _evcReserved_08000000 =
      _lookup<longword>('evcReserved_08000000');

  int get evcReserved_08000000 => _evcReserved_08000000.value;

  set evcReserved_08000000(int value) => _evcReserved_08000000.value = value;

  late final ffi.Pointer<longword> _evcReserved_10000000 =
      _lookup<longword>('evcReserved_10000000');

  int get evcReserved_10000000 => _evcReserved_10000000.value;

  set evcReserved_10000000(int value) => _evcReserved_10000000.value = value;

  late final ffi.Pointer<longword> _evcReserved_20000000 =
      _lookup<longword>('evcReserved_20000000');

  int get evcReserved_20000000 => _evcReserved_20000000.value;

  set evcReserved_20000000(int value) => _evcReserved_20000000.value = value;

  late final ffi.Pointer<longword> _evcReserved_40000000 =
      _lookup<longword>('evcReserved_40000000');

  int get evcReserved_40000000 => _evcReserved_40000000.value;

  set evcReserved_40000000(int value) => _evcReserved_40000000.value = value;

  late final ffi.Pointer<longword> _evcReserved_80000000 =
      _lookup<longword>('evcReserved_80000000');

  int get evcReserved_80000000 => _evcReserved_80000000.value;

  set evcReserved_80000000(int value) => _evcReserved_80000000.value = value;

  late final ffi.Pointer<longword> _evcAll = _lookup<longword>('evcAll');

  int get evcAll => _evcAll.value;

  set evcAll(int value) => _evcAll.value = value;

  late final ffi.Pointer<longword> _evcNone = _lookup<longword>('evcNone');

  int get evcNone => _evcNone.value;

  set evcNone(int value) => _evcNone.value = value;

  late final ffi.Pointer<word> _evsUnknown = _lookup<word>('evsUnknown');

  int get evsUnknown => _evsUnknown.value;

  set evsUnknown(int value) => _evsUnknown.value = value;

  late final ffi.Pointer<word> _evsStartUpload =
      _lookup<word>('evsStartUpload');

  int get evsStartUpload => _evsStartUpload.value;

  set evsStartUpload(int value) => _evsStartUpload.value = value;

  late final ffi.Pointer<word> _evsStartDownload =
      _lookup<word>('evsStartDownload');

  int get evsStartDownload => _evsStartDownload.value;

  set evsStartDownload(int value) => _evsStartDownload.value = value;

  late final ffi.Pointer<word> _evsGetBlockList =
      _lookup<word>('evsGetBlockList');

  int get evsGetBlockList => _evsGetBlockList.value;

  set evsGetBlockList(int value) => _evsGetBlockList.value = value;

  late final ffi.Pointer<word> _evsStartListBoT =
      _lookup<word>('evsStartListBoT');

  int get evsStartListBoT => _evsStartListBoT.value;

  set evsStartListBoT(int value) => _evsStartListBoT.value = value;

  late final ffi.Pointer<word> _evsListBoT = _lookup<word>('evsListBoT');

  int get evsListBoT => _evsListBoT.value;

  set evsListBoT(int value) => _evsListBoT.value = value;

  late final ffi.Pointer<word> _evsGetBlockInfo =
      _lookup<word>('evsGetBlockInfo');

  int get evsGetBlockInfo => _evsGetBlockInfo.value;

  set evsGetBlockInfo(int value) => _evsGetBlockInfo.value = value;

  late final ffi.Pointer<word> _evsGetClock = _lookup<word>('evsGetClock');

  int get evsGetClock => _evsGetClock.value;

  set evsGetClock(int value) => _evsGetClock.value = value;

  late final ffi.Pointer<word> _evsSetClock = _lookup<word>('evsSetClock');

  int get evsSetClock => _evsSetClock.value;

  set evsSetClock(int value) => _evsSetClock.value = value;

  late final ffi.Pointer<word> _evsSetPassword =
      _lookup<word>('evsSetPassword');

  int get evsSetPassword => _evsSetPassword.value;

  set evsSetPassword(int value) => _evsSetPassword.value = value;

  late final ffi.Pointer<word> _evsClrPassword =
      _lookup<word>('evsClrPassword');

  int get evsClrPassword => _evsClrPassword.value;

  set evsClrPassword(int value) => _evsClrPassword.value = value;

  late final ffi.Pointer<word> _grProgrammer = _lookup<word>('grProgrammer');

  int get grProgrammer => _grProgrammer.value;

  set grProgrammer(int value) => _grProgrammer.value = value;

  late final ffi.Pointer<word> _grCyclicData = _lookup<word>('grCyclicData');

  int get grCyclicData => _grCyclicData.value;

  set grCyclicData(int value) => _grCyclicData.value = value;

  late final ffi.Pointer<word> _grBlocksInfo = _lookup<word>('grBlocksInfo');

  int get grBlocksInfo => _grBlocksInfo.value;

  set grBlocksInfo(int value) => _grBlocksInfo.value = value;

  late final ffi.Pointer<word> _grSZL = _lookup<word>('grSZL');

  int get grSZL => _grSZL.value;

  set grSZL(int value) => _grSZL.value = value;

  late final ffi.Pointer<word> _grPassword = _lookup<word>('grPassword');

  int get grPassword => _grPassword.value;

  set grPassword(int value) => _grPassword.value = value;

  late final ffi.Pointer<word> _grBSend = _lookup<word>('grBSend');

  int get grBSend => _grBSend.value;

  set grBSend(int value) => _grBSend.value = value;

  late final ffi.Pointer<word> _grClock = _lookup<word>('grClock');

  int get grClock => _grClock.value;

  set grClock(int value) => _grClock.value = value;

  late final ffi.Pointer<word> _grSecurity = _lookup<word>('grSecurity');

  int get grSecurity => _grSecurity.value;

  set grSecurity(int value) => _grSecurity.value = value;

  late final ffi.Pointer<word> _CodeControlUnknown =
      _lookup<word>('CodeControlUnknown');

  int get CodeControlUnknown => _CodeControlUnknown.value;

  set CodeControlUnknown(int value) => _CodeControlUnknown.value = value;

  late final ffi.Pointer<word> _CodeControlColdStart =
      _lookup<word>('CodeControlColdStart');

  int get CodeControlColdStart => _CodeControlColdStart.value;

  set CodeControlColdStart(int value) => _CodeControlColdStart.value = value;

  late final ffi.Pointer<word> _CodeControlWarmStart =
      _lookup<word>('CodeControlWarmStart');

  int get CodeControlWarmStart => _CodeControlWarmStart.value;

  set CodeControlWarmStart(int value) => _CodeControlWarmStart.value = value;

  late final ffi.Pointer<word> _CodeControlStop =
      _lookup<word>('CodeControlStop');

  int get CodeControlStop => _CodeControlStop.value;

  set CodeControlStop(int value) => _CodeControlStop.value = value;

  late final ffi.Pointer<word> _CodeControlCompress =
      _lookup<word>('CodeControlCompress');

  int get CodeControlCompress => _CodeControlCompress.value;

  set CodeControlCompress(int value) => _CodeControlCompress.value = value;

  late final ffi.Pointer<word> _CodeControlCpyRamRom =
      _lookup<word>('CodeControlCpyRamRom');

  int get CodeControlCpyRamRom => _CodeControlCpyRamRom.value;

  set CodeControlCpyRamRom(int value) => _CodeControlCpyRamRom.value = value;

  late final ffi.Pointer<word> _CodeControlInsDel =
      _lookup<word>('CodeControlInsDel');

  int get CodeControlInsDel => _CodeControlInsDel.value;

  set CodeControlInsDel(int value) => _CodeControlInsDel.value = value;

  late final ffi.Pointer<word> _evrNoError = _lookup<word>('evrNoError');

  int get evrNoError => _evrNoError.value;

  set evrNoError(int value) => _evrNoError.value = value;

  late final ffi.Pointer<word> _evrFragmentRejected =
      _lookup<word>('evrFragmentRejected');

  int get evrFragmentRejected => _evrFragmentRejected.value;

  set evrFragmentRejected(int value) => _evrFragmentRejected.value = value;

  late final ffi.Pointer<word> _evrMalformedPDU =
      _lookup<word>('evrMalformedPDU');

  int get evrMalformedPDU => _evrMalformedPDU.value;

  set evrMalformedPDU(int value) => _evrMalformedPDU.value = value;

  late final ffi.Pointer<word> _evrSparseBytes =
      _lookup<word>('evrSparseBytes');

  int get evrSparseBytes => _evrSparseBytes.value;

  set evrSparseBytes(int value) => _evrSparseBytes.value = value;

  late final ffi.Pointer<word> _evrCannotHandlePDU =
      _lookup<word>('evrCannotHandlePDU');

  int get evrCannotHandlePDU => _evrCannotHandlePDU.value;

  set evrCannotHandlePDU(int value) => _evrCannotHandlePDU.value = value;

  late final ffi.Pointer<word> _evrNotImplemented =
      _lookup<word>('evrNotImplemented');

  int get evrNotImplemented => _evrNotImplemented.value;

  set evrNotImplemented(int value) => _evrNotImplemented.value = value;

  late final ffi.Pointer<word> _evrErrException =
      _lookup<word>('evrErrException');

  int get evrErrException => _evrErrException.value;

  set evrErrException(int value) => _evrErrException.value = value;

  late final ffi.Pointer<word> _evrErrAreaNotFound =
      _lookup<word>('evrErrAreaNotFound');

  int get evrErrAreaNotFound => _evrErrAreaNotFound.value;

  set evrErrAreaNotFound(int value) => _evrErrAreaNotFound.value = value;

  late final ffi.Pointer<word> _evrErrOutOfRange =
      _lookup<word>('evrErrOutOfRange');

  int get evrErrOutOfRange => _evrErrOutOfRange.value;

  set evrErrOutOfRange(int value) => _evrErrOutOfRange.value = value;

  late final ffi.Pointer<word> _evrErrOverPDU = _lookup<word>('evrErrOverPDU');

  int get evrErrOverPDU => _evrErrOverPDU.value;

  set evrErrOverPDU(int value) => _evrErrOverPDU.value = value;

  late final ffi.Pointer<word> _evrErrTransportSize =
      _lookup<word>('evrErrTransportSize');

  int get evrErrTransportSize => _evrErrTransportSize.value;

  set evrErrTransportSize(int value) => _evrErrTransportSize.value = value;

  late final ffi.Pointer<word> _evrInvalidGroupUData =
      _lookup<word>('evrInvalidGroupUData');

  int get evrInvalidGroupUData => _evrInvalidGroupUData.value;

  set evrInvalidGroupUData(int value) => _evrInvalidGroupUData.value = value;

  late final ffi.Pointer<word> _evrInvalidSZL = _lookup<word>('evrInvalidSZL');

  int get evrInvalidSZL => _evrInvalidSZL.value;

  set evrInvalidSZL(int value) => _evrInvalidSZL.value = value;

  late final ffi.Pointer<word> _evrDataSizeMismatch =
      _lookup<word>('evrDataSizeMismatch');

  int get evrDataSizeMismatch => _evrDataSizeMismatch.value;

  set evrDataSizeMismatch(int value) => _evrDataSizeMismatch.value = value;

  late final ffi.Pointer<word> _evrCannotUpload =
      _lookup<word>('evrCannotUpload');

  int get evrCannotUpload => _evrCannotUpload.value;

  set evrCannotUpload(int value) => _evrCannotUpload.value = value;

  late final ffi.Pointer<word> _evrCannotDownload =
      _lookup<word>('evrCannotDownload');

  int get evrCannotDownload => _evrCannotDownload.value;

  set evrCannotDownload(int value) => _evrCannotDownload.value = value;

  late final ffi.Pointer<word> _evrUploadInvalidID =
      _lookup<word>('evrUploadInvalidID');

  int get evrUploadInvalidID => _evrUploadInvalidID.value;

  set evrUploadInvalidID(int value) => _evrUploadInvalidID.value = value;

  late final ffi.Pointer<word> _evrResNotFound =
      _lookup<word>('evrResNotFound');

  int get evrResNotFound => _evrResNotFound.value;

  set evrResNotFound(int value) => _evrResNotFound.value = value;

  int Srv_Create() {
    return _Srv_Create();
  }

  late final _Srv_CreatePtr =
      _lookup<ffi.NativeFunction<S7Object Function()>>('Srv_Create');
  late final _Srv_Create = _Srv_CreatePtr.asFunction<int Function()>();

  void Srv_Destroy(
    ffi.Pointer<S7Object> Server,
  ) {
    return _Srv_Destroy(
      Server,
    );
  }

  late final _Srv_DestroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<S7Object>)>>(
          'Srv_Destroy');
  late final _Srv_Destroy =
      _Srv_DestroyPtr.asFunction<void Function(ffi.Pointer<S7Object>)>();

  int Srv_GetParam(
    int Server,
    int ParamNumber,
    ffi.Pointer<ffi.Void> pValue,
  ) {
    return _Srv_GetParam(
      Server,
      ParamNumber,
      pValue,
    );
  }

  late final _Srv_GetParamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              S7Object, ffi.Int, ffi.Pointer<ffi.Void>)>>('Srv_GetParam');
  late final _Srv_GetParam = _Srv_GetParamPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Void>)>();

  int Srv_SetParam(
    int Server,
    int ParamNumber,
    ffi.Pointer<ffi.Void> pValue,
  ) {
    return _Srv_SetParam(
      Server,
      ParamNumber,
      pValue,
    );
  }

  late final _Srv_SetParamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              S7Object, ffi.Int, ffi.Pointer<ffi.Void>)>>('Srv_SetParam');
  late final _Srv_SetParam = _Srv_SetParamPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Void>)>();

  int Srv_StartTo(
    int Server,
    ffi.Pointer<ffi.Char> Address,
  ) {
    return _Srv_StartTo(
      Server,
      Address,
    );
  }

  late final _Srv_StartToPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(S7Object, ffi.Pointer<ffi.Char>)>>('Srv_StartTo');
  late final _Srv_StartTo =
      _Srv_StartToPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  int Srv_Start(
    int Server,
  ) {
    return _Srv_Start(
      Server,
    );
  }

  late final _Srv_StartPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(S7Object)>>('Srv_Start');
  late final _Srv_Start = _Srv_StartPtr.asFunction<int Function(int)>();

  int Srv_Stop(
    int Server,
  ) {
    return _Srv_Stop(
      Server,
    );
  }

  late final _Srv_StopPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(S7Object)>>('Srv_Stop');
  late final _Srv_Stop = _Srv_StopPtr.asFunction<int Function(int)>();

  int Srv_RegisterArea(
    int Server,
    int AreaCode,
    int Index,
    ffi.Pointer<ffi.Void> pUsrData,
    int Size,
  ) {
    return _Srv_RegisterArea(
      Server,
      AreaCode,
      Index,
      pUsrData,
      Size,
    );
  }

  late final _Srv_RegisterAreaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(S7Object, ffi.Int, word, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('Srv_RegisterArea');
  late final _Srv_RegisterArea = _Srv_RegisterAreaPtr.asFunction<
      int Function(int, int, int, ffi.Pointer<ffi.Void>, int)>();

  int Srv_UnregisterArea(
    int Server,
    int AreaCode,
    int Index,
  ) {
    return _Srv_UnregisterArea(
      Server,
      AreaCode,
      Index,
    );
  }

  late final _Srv_UnregisterAreaPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(S7Object, ffi.Int, word)>>(
          'Srv_UnregisterArea');
  late final _Srv_UnregisterArea =
      _Srv_UnregisterAreaPtr.asFunction<int Function(int, int, int)>();

  int Srv_LockArea(
    int Server,
    int AreaCode,
    int Index,
  ) {
    return _Srv_LockArea(
      Server,
      AreaCode,
      Index,
    );
  }

  late final _Srv_LockAreaPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(S7Object, ffi.Int, word)>>(
          'Srv_LockArea');
  late final _Srv_LockArea =
      _Srv_LockAreaPtr.asFunction<int Function(int, int, int)>();

  int Srv_UnlockArea(
    int Server,
    int AreaCode,
    int Index,
  ) {
    return _Srv_UnlockArea(
      Server,
      AreaCode,
      Index,
    );
  }

  late final _Srv_UnlockAreaPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(S7Object, ffi.Int, word)>>(
          'Srv_UnlockArea');
  late final _Srv_UnlockArea =
      _Srv_UnlockAreaPtr.asFunction<int Function(int, int, int)>();

  int Srv_GetStatus(
    int Server,
    ffi.Pointer<ffi.Int> ServerStatus,
    ffi.Pointer<ffi.Int> CpuStatus,
    ffi.Pointer<ffi.Int> ClientsCount,
  ) {
    return _Srv_GetStatus(
      Server,
      ServerStatus,
      CpuStatus,
      ClientsCount,
    );
  }

  late final _Srv_GetStatusPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(S7Object, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('Srv_GetStatus');
  late final _Srv_GetStatus = _Srv_GetStatusPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  int Srv_SetCpuStatus(
    int Server,
    int CpuStatus,
  ) {
    return _Srv_SetCpuStatus(
      Server,
      CpuStatus,
    );
  }

  late final _Srv_SetCpuStatusPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(S7Object, ffi.Int)>>(
          'Srv_SetCpuStatus');
  late final _Srv_SetCpuStatus =
      _Srv_SetCpuStatusPtr.asFunction<int Function(int, int)>();

  int Srv_ClearEvents(
    int Server,
  ) {
    return _Srv_ClearEvents(
      Server,
    );
  }

  late final _Srv_ClearEventsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(S7Object)>>(
          'Srv_ClearEvents');
  late final _Srv_ClearEvents =
      _Srv_ClearEventsPtr.asFunction<int Function(int)>();

  int Srv_PickEvent(
    int Server,
    ffi.Pointer<TSrvEvent> pEvent,
    ffi.Pointer<ffi.Int> EvtReady,
  ) {
    return _Srv_PickEvent(
      Server,
      pEvent,
      EvtReady,
    );
  }

  late final _Srv_PickEventPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(S7Object, ffi.Pointer<TSrvEvent>,
              ffi.Pointer<ffi.Int>)>>('Srv_PickEvent');
  late final _Srv_PickEvent = _Srv_PickEventPtr.asFunction<
      int Function(int, ffi.Pointer<TSrvEvent>, ffi.Pointer<ffi.Int>)>();

  int Srv_GetMask(
    int Server,
    int MaskKind,
    ffi.Pointer<longword> Mask,
  ) {
    return _Srv_GetMask(
      Server,
      MaskKind,
      Mask,
    );
  }

  late final _Srv_GetMaskPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              S7Object, ffi.Int, ffi.Pointer<longword>)>>('Srv_GetMask');
  late final _Srv_GetMask = _Srv_GetMaskPtr.asFunction<
      int Function(int, int, ffi.Pointer<longword>)>();

  int Srv_SetMask(
    int Server,
    int MaskKind,
    int Mask,
  ) {
    return _Srv_SetMask(
      Server,
      MaskKind,
      Mask,
    );
  }

  late final _Srv_SetMaskPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(S7Object, ffi.Int, longword)>>(
      'Srv_SetMask');
  late final _Srv_SetMask =
      _Srv_SetMaskPtr.asFunction<int Function(int, int, int)>();

  int Srv_SetEventsCallback(
    int Server,
    pfn_SrvCallBack pCallback,
    ffi.Pointer<ffi.Void> usrPtr,
  ) {
    return _Srv_SetEventsCallback(
      Server,
      pCallback,
      usrPtr,
    );
  }

  late final _Srv_SetEventsCallbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(S7Object, pfn_SrvCallBack,
              ffi.Pointer<ffi.Void>)>>('Srv_SetEventsCallback');
  late final _Srv_SetEventsCallback = _Srv_SetEventsCallbackPtr.asFunction<
      int Function(int, pfn_SrvCallBack, ffi.Pointer<ffi.Void>)>();

  int Srv_SetReadEventsCallback(
    int Server,
    pfn_SrvCallBack pCallback,
    ffi.Pointer<ffi.Void> usrPtr,
  ) {
    return _Srv_SetReadEventsCallback(
      Server,
      pCallback,
      usrPtr,
    );
  }

  late final _Srv_SetReadEventsCallbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(S7Object, pfn_SrvCallBack,
              ffi.Pointer<ffi.Void>)>>('Srv_SetReadEventsCallback');
  late final _Srv_SetReadEventsCallback = _Srv_SetReadEventsCallbackPtr
      .asFunction<int Function(int, pfn_SrvCallBack, ffi.Pointer<ffi.Void>)>();

  int Srv_SetRWAreaCallback(
    int Server,
    pfn_RWAreaCallBack pCallback,
    ffi.Pointer<ffi.Void> usrPtr,
  ) {
    return _Srv_SetRWAreaCallback(
      Server,
      pCallback,
      usrPtr,
    );
  }

  late final _Srv_SetRWAreaCallbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(S7Object, pfn_RWAreaCallBack,
              ffi.Pointer<ffi.Void>)>>('Srv_SetRWAreaCallback');
  late final _Srv_SetRWAreaCallback = _Srv_SetRWAreaCallbackPtr.asFunction<
      int Function(int, pfn_RWAreaCallBack, ffi.Pointer<ffi.Void>)>();

  int Srv_EventText(
    ffi.Pointer<TSrvEvent> Event,
    ffi.Pointer<ffi.Char> Text,
    int TextLen,
  ) {
    return _Srv_EventText(
      Event,
      Text,
      TextLen,
    );
  }

  late final _Srv_EventTextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<TSrvEvent>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('Srv_EventText');
  late final _Srv_EventText = _Srv_EventTextPtr.asFunction<
      int Function(ffi.Pointer<TSrvEvent>, ffi.Pointer<ffi.Char>, int)>();

  int Srv_ErrorText(
    int Error,
    ffi.Pointer<ffi.Char> Text,
    int TextLen,
  ) {
    return _Srv_ErrorText(
      Error,
      Text,
      TextLen,
    );
  }

  late final _Srv_ErrorTextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('Srv_ErrorText');
  late final _Srv_ErrorText = _Srv_ErrorTextPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, int)>();

  late final ffi.Pointer<ffi.Int> _par_stopped =
      _lookup<ffi.Int>('par_stopped');

  int get par_stopped => _par_stopped.value;

  set par_stopped(int value) => _par_stopped.value = value;

  late final ffi.Pointer<ffi.Int> _par_connecting =
      _lookup<ffi.Int>('par_connecting');

  int get par_connecting => _par_connecting.value;

  set par_connecting(int value) => _par_connecting.value = value;

  late final ffi.Pointer<ffi.Int> _par_waiting =
      _lookup<ffi.Int>('par_waiting');

  int get par_waiting => _par_waiting.value;

  set par_waiting(int value) => _par_waiting.value = value;

  late final ffi.Pointer<ffi.Int> _par_linked = _lookup<ffi.Int>('par_linked');

  int get par_linked => _par_linked.value;

  set par_linked(int value) => _par_linked.value = value;

  late final ffi.Pointer<ffi.Int> _par_sending =
      _lookup<ffi.Int>('par_sending');

  int get par_sending => _par_sending.value;

  set par_sending(int value) => _par_sending.value = value;

  late final ffi.Pointer<ffi.Int> _par_receiving =
      _lookup<ffi.Int>('par_receiving');

  int get par_receiving => _par_receiving.value;

  set par_receiving(int value) => _par_receiving.value = value;

  late final ffi.Pointer<ffi.Int> _par_binderror =
      _lookup<ffi.Int>('par_binderror');

  int get par_binderror => _par_binderror.value;

  set par_binderror(int value) => _par_binderror.value = value;

  late final ffi.Pointer<longword> _errParAddressInUse =
      _lookup<longword>('errParAddressInUse');

  int get errParAddressInUse => _errParAddressInUse.value;

  set errParAddressInUse(int value) => _errParAddressInUse.value = value;

  late final ffi.Pointer<longword> _errParNoRoom =
      _lookup<longword>('errParNoRoom');

  int get errParNoRoom => _errParNoRoom.value;

  set errParNoRoom(int value) => _errParNoRoom.value = value;

  late final ffi.Pointer<longword> _errServerNoRoom =
      _lookup<longword>('errServerNoRoom');

  int get errServerNoRoom => _errServerNoRoom.value;

  set errServerNoRoom(int value) => _errServerNoRoom.value = value;

  late final ffi.Pointer<longword> _errParInvalidParams =
      _lookup<longword>('errParInvalidParams');

  int get errParInvalidParams => _errParInvalidParams.value;

  set errParInvalidParams(int value) => _errParInvalidParams.value = value;

  late final ffi.Pointer<longword> _errParNotLinked =
      _lookup<longword>('errParNotLinked');

  int get errParNotLinked => _errParNotLinked.value;

  set errParNotLinked(int value) => _errParNotLinked.value = value;

  late final ffi.Pointer<longword> _errParBusy =
      _lookup<longword>('errParBusy');

  int get errParBusy => _errParBusy.value;

  set errParBusy(int value) => _errParBusy.value = value;

  late final ffi.Pointer<longword> _errParFrameTimeout =
      _lookup<longword>('errParFrameTimeout');

  int get errParFrameTimeout => _errParFrameTimeout.value;

  set errParFrameTimeout(int value) => _errParFrameTimeout.value = value;

  late final ffi.Pointer<longword> _errParInvalidPDU =
      _lookup<longword>('errParInvalidPDU');

  int get errParInvalidPDU => _errParInvalidPDU.value;

  set errParInvalidPDU(int value) => _errParInvalidPDU.value = value;

  late final ffi.Pointer<longword> _errParSendTimeout =
      _lookup<longword>('errParSendTimeout');

  int get errParSendTimeout => _errParSendTimeout.value;

  set errParSendTimeout(int value) => _errParSendTimeout.value = value;

  late final ffi.Pointer<longword> _errParRecvTimeout =
      _lookup<longword>('errParRecvTimeout');

  int get errParRecvTimeout => _errParRecvTimeout.value;

  set errParRecvTimeout(int value) => _errParRecvTimeout.value = value;

  late final ffi.Pointer<longword> _errParSendRefused =
      _lookup<longword>('errParSendRefused');

  int get errParSendRefused => _errParSendRefused.value;

  set errParSendRefused(int value) => _errParSendRefused.value = value;

  late final ffi.Pointer<longword> _errParNegotiatingPDU =
      _lookup<longword>('errParNegotiatingPDU');

  int get errParNegotiatingPDU => _errParNegotiatingPDU.value;

  set errParNegotiatingPDU(int value) => _errParNegotiatingPDU.value = value;

  late final ffi.Pointer<longword> _errParSendingBlock =
      _lookup<longword>('errParSendingBlock');

  int get errParSendingBlock => _errParSendingBlock.value;

  set errParSendingBlock(int value) => _errParSendingBlock.value = value;

  late final ffi.Pointer<longword> _errParRecvingBlock =
      _lookup<longword>('errParRecvingBlock');

  int get errParRecvingBlock => _errParRecvingBlock.value;

  set errParRecvingBlock(int value) => _errParRecvingBlock.value = value;

  late final ffi.Pointer<longword> _errParBindError =
      _lookup<longword>('errParBindError');

  int get errParBindError => _errParBindError.value;

  set errParBindError(int value) => _errParBindError.value = value;

  late final ffi.Pointer<longword> _errParDestroying =
      _lookup<longword>('errParDestroying');

  int get errParDestroying => _errParDestroying.value;

  set errParDestroying(int value) => _errParDestroying.value = value;

  late final ffi.Pointer<longword> _errParInvalidParamNumber =
      _lookup<longword>('errParInvalidParamNumber');

  int get errParInvalidParamNumber => _errParInvalidParamNumber.value;

  set errParInvalidParamNumber(int value) =>
      _errParInvalidParamNumber.value = value;

  late final ffi.Pointer<longword> _errParCannotChangeParam =
      _lookup<longword>('errParCannotChangeParam');

  int get errParCannotChangeParam => _errParCannotChangeParam.value;

  set errParCannotChangeParam(int value) =>
      _errParCannotChangeParam.value = value;

  late final ffi.Pointer<longword> _errParBufferTooSmall =
      _lookup<longword>('errParBufferTooSmall');

  int get errParBufferTooSmall => _errParBufferTooSmall.value;

  set errParBufferTooSmall(int value) => _errParBufferTooSmall.value = value;

  int Par_Create(
    int Active,
  ) {
    return _Par_Create(
      Active,
    );
  }

  late final _Par_CreatePtr =
      _lookup<ffi.NativeFunction<S7Object Function(ffi.Int)>>('Par_Create');
  late final _Par_Create = _Par_CreatePtr.asFunction<int Function(int)>();

  void Par_Destroy(
    ffi.Pointer<S7Object> Partner,
  ) {
    return _Par_Destroy(
      Partner,
    );
  }

  late final _Par_DestroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<S7Object>)>>(
          'Par_Destroy');
  late final _Par_Destroy =
      _Par_DestroyPtr.asFunction<void Function(ffi.Pointer<S7Object>)>();

  int Par_GetParam(
    int Partner,
    int ParamNumber,
    ffi.Pointer<ffi.Void> pValue,
  ) {
    return _Par_GetParam(
      Partner,
      ParamNumber,
      pValue,
    );
  }

  late final _Par_GetParamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              S7Object, ffi.Int, ffi.Pointer<ffi.Void>)>>('Par_GetParam');
  late final _Par_GetParam = _Par_GetParamPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Void>)>();

  int Par_SetParam(
    int Partner,
    int ParamNumber,
    ffi.Pointer<ffi.Void> pValue,
  ) {
    return _Par_SetParam(
      Partner,
      ParamNumber,
      pValue,
    );
  }

  late final _Par_SetParamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              S7Object, ffi.Int, ffi.Pointer<ffi.Void>)>>('Par_SetParam');
  late final _Par_SetParam = _Par_SetParamPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Void>)>();

  int Par_StartTo(
    int Partner,
    ffi.Pointer<ffi.Char> LocalAddress,
    ffi.Pointer<ffi.Char> RemoteAddress,
    int LocTsap,
    int RemTsap,
  ) {
    return _Par_StartTo(
      Partner,
      LocalAddress,
      RemoteAddress,
      LocTsap,
      RemTsap,
    );
  }

  late final _Par_StartToPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(S7Object, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, word, word)>>('Par_StartTo');
  late final _Par_StartTo = _Par_StartToPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, int)>();

  int Par_Start(
    int Partner,
  ) {
    return _Par_Start(
      Partner,
    );
  }

  late final _Par_StartPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(S7Object)>>('Par_Start');
  late final _Par_Start = _Par_StartPtr.asFunction<int Function(int)>();

  int Par_Stop(
    int Partner,
  ) {
    return _Par_Stop(
      Partner,
    );
  }

  late final _Par_StopPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(S7Object)>>('Par_Stop');
  late final _Par_Stop = _Par_StopPtr.asFunction<int Function(int)>();

  int Par_BSend(
    int Partner,
    int R_ID,
    ffi.Pointer<ffi.Void> pUsrData,
    int Size,
  ) {
    return _Par_BSend(
      Partner,
      R_ID,
      pUsrData,
      Size,
    );
  }

  late final _Par_BSendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(S7Object, longword, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('Par_BSend');
  late final _Par_BSend = _Par_BSendPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Void>, int)>();

  int Par_AsBSend(
    int Partner,
    int R_ID,
    ffi.Pointer<ffi.Void> pUsrData,
    int Size,
  ) {
    return _Par_AsBSend(
      Partner,
      R_ID,
      pUsrData,
      Size,
    );
  }

  late final _Par_AsBSendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(S7Object, longword, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('Par_AsBSend');
  late final _Par_AsBSend = _Par_AsBSendPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Void>, int)>();

  int Par_CheckAsBSendCompletion(
    int Partner,
    ffi.Pointer<ffi.Int> opResult,
  ) {
    return _Par_CheckAsBSendCompletion(
      Partner,
      opResult,
    );
  }

  late final _Par_CheckAsBSendCompletionPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(S7Object, ffi.Pointer<ffi.Int>)>>(
      'Par_CheckAsBSendCompletion');
  late final _Par_CheckAsBSendCompletion = _Par_CheckAsBSendCompletionPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Int>)>();

  int Par_WaitAsBSendCompletion(
    int Partner,
    int Timeout,
  ) {
    return _Par_WaitAsBSendCompletion(
      Partner,
      Timeout,
    );
  }

  late final _Par_WaitAsBSendCompletionPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(S7Object, longword)>>(
          'Par_WaitAsBSendCompletion');
  late final _Par_WaitAsBSendCompletion =
      _Par_WaitAsBSendCompletionPtr.asFunction<int Function(int, int)>();

  int Par_SetSendCallback(
    int Partner,
    pfn_ParSendCompletion pCompletion,
    ffi.Pointer<ffi.Void> usrPtr,
  ) {
    return _Par_SetSendCallback(
      Partner,
      pCompletion,
      usrPtr,
    );
  }

  late final _Par_SetSendCallbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(S7Object, pfn_ParSendCompletion,
              ffi.Pointer<ffi.Void>)>>('Par_SetSendCallback');
  late final _Par_SetSendCallback = _Par_SetSendCallbackPtr.asFunction<
      int Function(int, pfn_ParSendCompletion, ffi.Pointer<ffi.Void>)>();

  int Par_BRecv(
    int Partner,
    ffi.Pointer<longword> R_ID,
    ffi.Pointer<ffi.Void> pData,
    ffi.Pointer<ffi.Int> Size,
    int Timeout,
  ) {
    return _Par_BRecv(
      Partner,
      R_ID,
      pData,
      Size,
      Timeout,
    );
  }

  late final _Par_BRecvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              S7Object,
              ffi.Pointer<longword>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Int>,
              longword)>>('Par_BRecv');
  late final _Par_BRecv = _Par_BRecvPtr.asFunction<
      int Function(int, ffi.Pointer<longword>, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Int>, int)>();

  int Par_CheckAsBRecvCompletion(
    int Partner,
    ffi.Pointer<ffi.Int> opResult,
    ffi.Pointer<longword> R_ID,
    ffi.Pointer<ffi.Void> pData,
    ffi.Pointer<ffi.Int> Size,
  ) {
    return _Par_CheckAsBRecvCompletion(
      Partner,
      opResult,
      R_ID,
      pData,
      Size,
    );
  }

  late final _Par_CheckAsBRecvCompletionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              S7Object,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<longword>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Int>)>>('Par_CheckAsBRecvCompletion');
  late final _Par_CheckAsBRecvCompletion =
      _Par_CheckAsBRecvCompletionPtr.asFunction<
          int Function(int, ffi.Pointer<ffi.Int>, ffi.Pointer<longword>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int>)>();

  int Par_SetRecvCallback(
    int Partner,
    pfn_ParRecvCallBack pCompletion,
    ffi.Pointer<ffi.Void> usrPtr,
  ) {
    return _Par_SetRecvCallback(
      Partner,
      pCompletion,
      usrPtr,
    );
  }

  late final _Par_SetRecvCallbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(S7Object, pfn_ParRecvCallBack,
              ffi.Pointer<ffi.Void>)>>('Par_SetRecvCallback');
  late final _Par_SetRecvCallback = _Par_SetRecvCallbackPtr.asFunction<
      int Function(int, pfn_ParRecvCallBack, ffi.Pointer<ffi.Void>)>();

  int Par_GetTimes(
    int Partner,
    ffi.Pointer<longword> SendTime,
    ffi.Pointer<longword> RecvTime,
  ) {
    return _Par_GetTimes(
      Partner,
      SendTime,
      RecvTime,
    );
  }

  late final _Par_GetTimesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(S7Object, ffi.Pointer<longword>,
              ffi.Pointer<longword>)>>('Par_GetTimes');
  late final _Par_GetTimes = _Par_GetTimesPtr.asFunction<
      int Function(int, ffi.Pointer<longword>, ffi.Pointer<longword>)>();

  int Par_GetStats(
    int Partner,
    ffi.Pointer<longword> BytesSent,
    ffi.Pointer<longword> BytesRecv,
    ffi.Pointer<longword> SendErrors,
    ffi.Pointer<longword> RecvErrors,
  ) {
    return _Par_GetStats(
      Partner,
      BytesSent,
      BytesRecv,
      SendErrors,
      RecvErrors,
    );
  }

  late final _Par_GetStatsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              S7Object,
              ffi.Pointer<longword>,
              ffi.Pointer<longword>,
              ffi.Pointer<longword>,
              ffi.Pointer<longword>)>>('Par_GetStats');
  late final _Par_GetStats = _Par_GetStatsPtr.asFunction<
      int Function(int, ffi.Pointer<longword>, ffi.Pointer<longword>,
          ffi.Pointer<longword>, ffi.Pointer<longword>)>();

  int Par_GetLastError(
    int Partner,
    ffi.Pointer<ffi.Int> LastError,
  ) {
    return _Par_GetLastError(
      Partner,
      LastError,
    );
  }

  late final _Par_GetLastErrorPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(S7Object, ffi.Pointer<ffi.Int>)>>(
      'Par_GetLastError');
  late final _Par_GetLastError = _Par_GetLastErrorPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Int>)>();

  int Par_GetStatus(
    int Partner,
    ffi.Pointer<ffi.Int> Status,
  ) {
    return _Par_GetStatus(
      Partner,
      Status,
    );
  }

  late final _Par_GetStatusPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(S7Object, ffi.Pointer<ffi.Int>)>>(
      'Par_GetStatus');
  late final _Par_GetStatus =
      _Par_GetStatusPtr.asFunction<int Function(int, ffi.Pointer<ffi.Int>)>();

  int Par_ErrorText(
    int Error,
    ffi.Pointer<ffi.Char> Text,
    int TextLen,
  ) {
    return _Par_ErrorText(
      Error,
      Text,
      TextLen,
    );
  }

  late final _Par_ErrorTextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('Par_ErrorText');
  late final _Par_ErrorText = _Par_ErrorTextPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, int)>();
}

typedef va_list = ffi.Pointer<ffi.Char>;

final class __crt_locale_data_public extends ffi.Struct {
  external ffi.Pointer<ffi.UnsignedShort> _locale_pctype;

  @ffi.Int()
  external int _locale_mb_cur_max;

  @ffi.UnsignedInt()
  external int _locale_lc_codepage;
}

final class __crt_locale_pointers extends ffi.Struct {
  external ffi.Pointer<__crt_locale_data> locinfo;

  external ffi.Pointer<__crt_multibyte_data> mbcinfo;
}

final class __crt_locale_data extends ffi.Opaque {}

final class __crt_multibyte_data extends ffi.Opaque {}

final class _Mbstatet extends ffi.Struct {
  @ffi.UnsignedLong()
  external int _Wchar;

  @ffi.UnsignedShort()
  external int _Byte;

  @ffi.UnsignedShort()
  external int _State;
}

final class tm extends ffi.Struct {
  @ffi.Int()
  external int tm_sec;

  @ffi.Int()
  external int tm_min;

  @ffi.Int()
  external int tm_hour;

  @ffi.Int()
  external int tm_mday;

  @ffi.Int()
  external int tm_mon;

  @ffi.Int()
  external int tm_year;

  @ffi.Int()
  external int tm_wday;

  @ffi.Int()
  external int tm_yday;

  @ffi.Int()
  external int tm_isdst;
}

typedef errno_t = ffi.Int;
typedef _locale_t = ffi.Pointer<__crt_locale_pointers>;
typedef __time32_t = ffi.Long;
typedef __time64_t = ffi.LongLong;

final class _timespec32 extends ffi.Struct {
  @__time32_t()
  external int tv_sec;

  @ffi.Long()
  external int tv_nsec;
}

final class _timespec64 extends ffi.Struct {
  @__time64_t()
  external int tv_sec;

  @ffi.Long()
  external int tv_nsec;
}

final class timespec extends ffi.Struct {
  @time_t()
  external int tv_sec;

  @ffi.Long()
  external int tv_nsec;
}

typedef time_t = __time64_t;
typedef clock_t = ffi.Long;

@ffi.Packed(1)
final class tm1 extends ffi.Struct {
  @ffi.Int()
  external int tm_sec;

  @ffi.Int()
  external int tm_min;

  @ffi.Int()
  external int tm_hour;

  @ffi.Int()
  external int tm_mday;

  @ffi.Int()
  external int tm_mon;

  @ffi.Int()
  external int tm_year;

  @ffi.Int()
  external int tm_wday;

  @ffi.Int()
  external int tm_yday;

  @ffi.Int()
  external int tm_isdst;
}

typedef longword = ffi.Uint32;

@ffi.Packed(1)
final class TS7Tag extends ffi.Struct {
  @ffi.Int()
  external int Area;

  @ffi.Int()
  external int DBNumber;

  @ffi.Int()
  external int Start;

  @ffi.Int()
  external int Size;

  @ffi.Int()
  external int WordLen;
}

typedef word = ffi.Uint16;
typedef byte = ffi.Uint8;

@ffi.Packed(1)
final class TS7DataItem extends ffi.Struct {
  @ffi.Int()
  external int Area;

  @ffi.Int()
  external int WordLen;

  @ffi.Int()
  external int Result;

  @ffi.Int()
  external int DBNumber;

  @ffi.Int()
  external int Start;

  @ffi.Int()
  external int Amount;

  external ffi.Pointer<ffi.Void> pdata;
}

@ffi.Packed(1)
final class TS7BlocksList extends ffi.Struct {
  @ffi.Int()
  external int OBCount;

  @ffi.Int()
  external int FBCount;

  @ffi.Int()
  external int FCCount;

  @ffi.Int()
  external int SFBCount;

  @ffi.Int()
  external int SFCCount;

  @ffi.Int()
  external int DBCount;

  @ffi.Int()
  external int SDBCount;
}

@ffi.Packed(1)
final class TS7BlockInfo extends ffi.Struct {
  @ffi.Int()
  external int BlkType;

  @ffi.Int()
  external int BlkNumber;

  @ffi.Int()
  external int BlkLang;

  @ffi.Int()
  external int BlkFlags;

  @ffi.Int()
  external int MC7Size;

  @ffi.Int()
  external int LoadSize;

  @ffi.Int()
  external int LocalData;

  @ffi.Int()
  external int SBBLength;

  @ffi.Int()
  external int CheckSum;

  @ffi.Int()
  external int Version;

  @ffi.Array.multi([11])
  external ffi.Array<ffi.Char> CodeDate;

  @ffi.Array.multi([11])
  external ffi.Array<ffi.Char> IntfDate;

  @ffi.Array.multi([9])
  external ffi.Array<ffi.Char> Author;

  @ffi.Array.multi([9])
  external ffi.Array<ffi.Char> Family;

  @ffi.Array.multi([9])
  external ffi.Array<ffi.Char> Header;
}

final class TS7OrderCode extends ffi.Struct {
  @ffi.Array.multi([21])
  external ffi.Array<ffi.Char> Code;

  @byte()
  external int V1;

  @byte()
  external int V2;

  @byte()
  external int V3;
}

final class TS7CpuInfo extends ffi.Struct {
  @ffi.Array.multi([33])
  external ffi.Array<ffi.Char> ModuleTypeName;

  @ffi.Array.multi([25])
  external ffi.Array<ffi.Char> SerialNumber;

  @ffi.Array.multi([25])
  external ffi.Array<ffi.Char> ASName;

  @ffi.Array.multi([27])
  external ffi.Array<ffi.Char> Copyright;

  @ffi.Array.multi([25])
  external ffi.Array<ffi.Char> ModuleName;
}

@ffi.Packed(1)
final class TS7CpInfo extends ffi.Struct {
  @ffi.Int()
  external int MaxPduLengt;

  @ffi.Int()
  external int MaxConnections;

  @ffi.Int()
  external int MaxMpiRate;

  @ffi.Int()
  external int MaxBusRate;
}

@ffi.Packed(1)
final class SZL_HEADER extends ffi.Struct {
  @word()
  external int LENTHDR;

  @word()
  external int N_DR;
}

final class TS7SZL extends ffi.Struct {
  external SZL_HEADER Header;

  @ffi.Array.multi([16380])
  external ffi.Array<byte> Data;
}

@ffi.Packed(1)
final class TS7SZLList extends ffi.Struct {
  external SZL_HEADER Header;

  @ffi.Array.multi([8190])
  external ffi.Array<word> List;
}

@ffi.Packed(1)
final class TS7Protection extends ffi.Struct {
  @word()
  external int sch_schal;

  @word()
  external int sch_par;

  @word()
  external int sch_rel;

  @word()
  external int bart_sch;

  @word()
  external int anl_sch;
}

typedef S7Object = ffi.UintPtr;
typedef pfn_CliCompletion = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<ffi.Void> usrPtr, ffi.Int opCode, ffi.Int opResult)>>;
typedef PS7DataItem = ffi.Pointer<TS7DataItem>;

@ffi.Packed(1)
final class TSrvEvent extends ffi.Struct {
  @time_t()
  external int EvtTime;

  @ffi.Int()
  external int EvtSender;

  @longword()
  external int EvtCode;

  @word()
  external int EvtRetCode;

  @word()
  external int EvtParam1;

  @word()
  external int EvtParam2;

  @word()
  external int EvtParam3;

  @word()
  external int EvtParam4;
}

typedef pfn_SrvCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<ffi.Void> usrPtr, PSrvEvent PEvent, ffi.Int Size)>>;
typedef PSrvEvent = ffi.Pointer<TSrvEvent>;
typedef pfn_RWAreaCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(ffi.Pointer<ffi.Void> usrPtr, ffi.Int Sender,
            ffi.Int Operation, PS7Tag PTag, ffi.Pointer<ffi.Void> pUsrData)>>;
typedef PS7Tag = ffi.Pointer<TS7Tag>;
typedef pfn_ParSendCompletion = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void> usrPtr, ffi.Int opResult)>>;
typedef pfn_ParRecvCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void> usrPtr, ffi.Int opResult,
            longword R_ID, ffi.Pointer<ffi.Void> pData, ffi.Int Size)>>;

const int _VCRT_COMPILER_PREPROCESSOR = 1;

const int _SAL_VERSION = 20;

const int __SAL_H_VERSION = 180000000;

const int _USE_DECLSPECS_FOR_SAL = 0;

const int _USE_ATTRIBUTES_FOR_SAL = 0;

const int _CRT_PACKING = 8;

const int _VCRUNTIME_DISABLED_WARNINGS = 4514;

const int _HAS_EXCEPTIONS = 1;

const int _WCHAR_T_DEFINED = 1;

const int NULL = 0;

const int _HAS_CXX17 = 0;

const int _HAS_CXX20 = 0;

const int _HAS_CXX23 = 0;

const int _HAS_NODISCARD = 1;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -2147483648;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 2147483647;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 4294967295;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int WCHAR_MIN = 0;

const int WCHAR_MAX = 65535;

const int WINT_MIN = 0;

const int WINT_MAX = 65535;

const int _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE = 1;

const int _CRT_BUILD_DESKTOP_APP = 1;

const int _UCRT_DISABLED_WARNINGS = 4324;

const int _ARGMAX = 100;

const int _TRUNCATE = -1;

const int _CRT_INT_MAX = 2147483647;

const int _CRT_SIZE_MAX = -1;

const String __FILEW__ = 'C';

const int _CRT_FUNCTIONS_REQUIRED = 1;

const int _CRT_HAS_CXX17 = 0;

const int _CRT_HAS_C11 = 0;

const int _CRT_INTERNAL_NONSTDC_NAMES = 1;

const int __STDC_SECURE_LIB__ = 200411;

const int __GOT_SECURE_LIB__ = 200411;

const int __STDC_WANT_SECURE_LIB__ = 1;

const int _SECURECRT_FILL_BUFFER_PATTERN = 254;

const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES = 0;

const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT = 0;

const int _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES = 1;

const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY = 0;

const int _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY = 0;

const int _CRT_USE_CONFORMING_ANNEX_K_TIME = 0;

const int CLOCKS_PER_SEC = 1000;

const int TIME_UTC = 1;

const int CLK_TCK = 1000;

const int false1 = 0;

const int true1 = 1;

const int S7CpuStatusUnknown = 0;

const int S7CpuStatusRun = 8;

const int S7CpuStatusStop = 4;
